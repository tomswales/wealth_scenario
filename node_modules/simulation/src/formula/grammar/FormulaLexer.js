// @ts-nocheck
/* eslint-disable */


import antlr4 from "../../../vendor/antlr4-all.js";


const serializedATN = [4,0,61,486,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,
1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,3,8,144,8,8,1,8,
1,8,1,8,1,8,5,8,150,8,8,10,8,12,8,153,9,8,1,8,1,8,1,8,1,8,3,8,159,8,8,1,
8,1,8,1,9,3,9,164,8,9,1,9,1,9,1,9,3,9,169,8,9,1,9,5,9,172,8,9,10,9,12,9,
175,9,9,1,9,3,9,178,8,9,1,9,1,9,1,10,5,10,183,8,10,10,10,12,10,186,9,10,
1,10,1,10,5,10,190,8,10,10,10,12,10,193,9,10,4,10,195,8,10,11,10,12,10,196,
1,11,4,11,200,8,11,11,11,12,11,201,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,
26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,292,8,30,1,31,1,31,1,31,1,31,
1,32,1,32,1,32,1,32,1,32,3,32,303,8,32,1,33,1,33,1,33,3,33,308,8,33,1,34,
1,34,1,34,1,34,3,34,314,8,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,
1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,3,43,338,
8,43,1,44,1,44,1,45,1,45,1,45,3,45,345,8,45,1,46,1,46,1,46,3,46,350,8,46,
1,47,1,47,1,48,1,48,1,49,4,49,357,8,49,11,49,12,49,358,1,49,1,49,3,49,363,
8,49,1,49,5,49,366,8,49,10,49,12,49,369,9,49,3,49,371,8,49,1,50,5,50,374,
8,50,10,50,12,50,377,9,50,1,50,1,50,4,50,381,8,50,11,50,12,50,382,1,50,4,
50,386,8,50,11,50,12,50,387,1,50,3,50,391,8,50,1,50,1,50,3,50,395,8,50,1,
50,5,50,398,8,50,10,50,12,50,401,9,50,3,50,403,8,50,1,51,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,3,51,414,8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,5,55,436,
8,55,10,55,12,55,439,9,55,1,56,1,56,4,56,443,8,56,11,56,12,56,444,1,56,1,
56,1,56,1,56,1,56,4,56,452,8,56,11,56,12,56,453,1,56,1,56,1,56,3,56,459,
8,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,5,60,469,8,60,10,60,12,60,472,
9,60,1,60,1,60,1,60,1,60,1,60,5,60,479,8,60,10,60,12,60,482,9,60,1,60,3,
60,485,8,60,4,151,444,453,470,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
113,57,115,58,117,59,119,60,121,61,1,0,28,2,0,78,78,110,110,2,0,79,79,111,
111,2,0,84,84,116,116,2,0,10,10,13,13,2,0,87,87,119,119,2,0,72,72,104,104,
2,0,73,73,105,105,2,0,76,76,108,108,2,0,69,69,101,101,2,0,70,70,102,102,
2,0,82,82,114,114,2,0,77,77,109,109,2,0,66,66,98,98,2,0,89,89,121,121,2,
0,80,80,112,112,2,0,83,83,115,115,2,0,85,85,117,117,2,0,67,67,99,99,2,0,
68,68,100,100,2,0,65,65,97,97,2,0,88,88,120,120,2,0,43,43,45,45,2,0,81,81,
113,113,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,91,91,93,93,3,
0,9,9,12,12,32,32,1,0,34,34,523,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,125,1,0,0,0,5,127,1,0,
0,0,7,129,1,0,0,0,9,132,1,0,0,0,11,134,1,0,0,0,13,136,1,0,0,0,15,140,1,0,
0,0,17,143,1,0,0,0,19,163,1,0,0,0,21,184,1,0,0,0,23,199,1,0,0,0,25,203,1,
0,0,0,27,205,1,0,0,0,29,211,1,0,0,0,31,215,1,0,0,0,33,220,1,0,0,0,35,223,
1,0,0,0,37,226,1,0,0,0,39,229,1,0,0,0,41,234,1,0,0,0,43,237,1,0,0,0,45,242,
1,0,0,0,47,247,1,0,0,0,49,256,1,0,0,0,51,260,1,0,0,0,53,267,1,0,0,0,55,271,
1,0,0,0,57,275,1,0,0,0,59,281,1,0,0,0,61,291,1,0,0,0,63,293,1,0,0,0,65,302,
1,0,0,0,67,307,1,0,0,0,69,313,1,0,0,0,71,315,1,0,0,0,73,317,1,0,0,0,75,320,
1,0,0,0,77,322,1,0,0,0,79,325,1,0,0,0,81,327,1,0,0,0,83,329,1,0,0,0,85,331,
1,0,0,0,87,337,1,0,0,0,89,339,1,0,0,0,91,344,1,0,0,0,93,349,1,0,0,0,95,351,
1,0,0,0,97,353,1,0,0,0,99,356,1,0,0,0,101,390,1,0,0,0,103,413,1,0,0,0,105,
415,1,0,0,0,107,419,1,0,0,0,109,427,1,0,0,0,111,433,1,0,0,0,113,458,1,0,
0,0,115,460,1,0,0,0,117,462,1,0,0,0,119,464,1,0,0,0,121,484,1,0,0,0,123,
124,5,40,0,0,124,2,1,0,0,0,125,126,5,44,0,0,126,4,1,0,0,0,127,128,5,41,0,
0,128,6,1,0,0,0,129,130,5,60,0,0,130,131,5,45,0,0,131,8,1,0,0,0,132,133,
5,58,0,0,133,10,1,0,0,0,134,135,5,33,0,0,135,12,1,0,0,0,136,137,7,0,0,0,
137,138,7,1,0,0,138,139,7,2,0,0,139,14,1,0,0,0,140,141,5,46,0,0,141,16,1,
0,0,0,142,144,3,23,11,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,
145,146,5,47,0,0,146,147,5,42,0,0,147,151,1,0,0,0,148,150,9,0,0,0,149,148,
1,0,0,0,150,153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,0,0,152,154,1,0,0,0,
153,151,1,0,0,0,154,155,5,42,0,0,155,156,5,47,0,0,156,158,1,0,0,0,157,159,
3,23,11,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,6,8,0,
0,161,18,1,0,0,0,162,164,3,23,11,0,163,162,1,0,0,0,163,164,1,0,0,0,164,168,
1,0,0,0,165,166,5,47,0,0,166,169,5,47,0,0,167,169,5,35,0,0,168,165,1,0,0,
0,168,167,1,0,0,0,169,173,1,0,0,0,170,172,8,3,0,0,171,170,1,0,0,0,172,175,
1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,
176,178,3,23,11,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,
6,9,0,0,180,20,1,0,0,0,181,183,3,119,59,0,182,181,1,0,0,0,183,186,1,0,0,
0,184,182,1,0,0,0,184,185,1,0,0,0,185,194,1,0,0,0,186,184,1,0,0,0,187,191,
3,25,12,0,188,190,3,119,59,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,
0,0,191,192,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,194,187,1,0,0,0,195,
196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,22,1,0,0,0,198,200,3,119,
59,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,
24,1,0,0,0,203,204,7,3,0,0,204,26,1,0,0,0,205,206,7,4,0,0,206,207,7,5,0,
0,207,208,7,6,0,0,208,209,7,7,0,0,209,210,7,8,0,0,210,28,1,0,0,0,211,212,
7,9,0,0,212,213,7,1,0,0,213,214,7,10,0,0,214,30,1,0,0,0,215,216,7,9,0,0,
216,217,7,10,0,0,217,218,7,1,0,0,218,219,7,11,0,0,219,32,1,0,0,0,220,221,
7,6,0,0,221,222,7,0,0,0,222,34,1,0,0,0,223,224,7,2,0,0,224,225,7,1,0,0,225,
36,1,0,0,0,226,227,7,12,0,0,227,228,7,13,0,0,228,38,1,0,0,0,229,230,7,7,
0,0,230,231,7,1,0,0,231,232,7,1,0,0,232,233,7,14,0,0,233,40,1,0,0,0,234,
235,7,6,0,0,235,236,7,9,0,0,236,42,1,0,0,0,237,238,7,2,0,0,238,239,7,5,0,
0,239,240,7,8,0,0,240,241,7,0,0,0,241,44,1,0,0,0,242,243,7,8,0,0,243,244,
7,7,0,0,244,245,7,15,0,0,245,246,7,8,0,0,246,46,1,0,0,0,247,248,7,9,0,0,
248,249,7,16,0,0,249,250,7,0,0,0,250,251,7,17,0,0,251,252,7,2,0,0,252,253,
7,6,0,0,253,254,7,1,0,0,254,255,7,0,0,0,255,48,1,0,0,0,256,257,7,8,0,0,257,
258,7,0,0,0,258,259,7,18,0,0,259,50,1,0,0,0,260,261,7,10,0,0,261,262,7,8,
0,0,262,263,7,2,0,0,263,264,7,16,0,0,264,265,7,10,0,0,265,266,7,0,0,0,266,
52,1,0,0,0,267,268,7,0,0,0,268,269,7,8,0,0,269,270,7,4,0,0,270,54,1,0,0,
0,271,272,7,2,0,0,272,273,7,10,0,0,273,274,7,13,0,0,274,56,1,0,0,0,275,276,
7,17,0,0,276,277,7,19,0,0,277,278,7,2,0,0,278,279,7,17,0,0,279,280,7,5,0,
0,280,58,1,0,0,0,281,282,7,2,0,0,282,283,7,5,0,0,283,284,7,10,0,0,284,285,
7,1,0,0,285,286,7,4,0,0,286,60,1,0,0,0,287,288,5,124,0,0,288,292,5,124,0,
0,289,290,7,1,0,0,290,292,7,10,0,0,291,287,1,0,0,0,291,289,1,0,0,0,292,62,
1,0,0,0,293,294,7,20,0,0,294,295,7,1,0,0,295,296,7,10,0,0,296,64,1,0,0,0,
297,298,5,38,0,0,298,303,5,38,0,0,299,300,7,19,0,0,300,301,7,0,0,0,301,303,
7,18,0,0,302,297,1,0,0,0,302,299,1,0,0,0,303,66,1,0,0,0,304,308,5,61,0,0,
305,306,5,61,0,0,306,308,5,61,0,0,307,304,1,0,0,0,307,305,1,0,0,0,308,68,
1,0,0,0,309,310,5,33,0,0,310,314,5,61,0,0,311,312,5,60,0,0,312,314,5,62,
0,0,313,309,1,0,0,0,313,311,1,0,0,0,314,70,1,0,0,0,315,316,5,60,0,0,316,
72,1,0,0,0,317,318,5,60,0,0,318,319,5,61,0,0,319,74,1,0,0,0,320,321,5,62,
0,0,321,76,1,0,0,0,322,323,5,62,0,0,323,324,5,61,0,0,324,78,1,0,0,0,325,
326,5,43,0,0,326,80,1,0,0,0,327,328,5,45,0,0,328,82,1,0,0,0,329,330,5,42,
0,0,330,84,1,0,0,0,331,332,5,47,0,0,332,86,1,0,0,0,333,338,5,37,0,0,334,
335,7,11,0,0,335,336,7,1,0,0,336,338,7,18,0,0,337,333,1,0,0,0,337,334,1,
0,0,0,338,88,1,0,0,0,339,340,5,94,0,0,340,90,1,0,0,0,341,345,5,171,0,0,342,
343,5,60,0,0,343,345,5,60,0,0,344,341,1,0,0,0,344,342,1,0,0,0,345,92,1,0,
0,0,346,350,5,187,0,0,347,348,5,62,0,0,348,350,5,62,0,0,349,346,1,0,0,0,
349,347,1,0,0,0,350,94,1,0,0,0,351,352,5,123,0,0,352,96,1,0,0,0,353,354,
5,125,0,0,354,98,1,0,0,0,355,357,2,48,57,0,356,355,1,0,0,0,357,358,1,0,0,
0,358,356,1,0,0,0,358,359,1,0,0,0,359,370,1,0,0,0,360,362,7,8,0,0,361,363,
7,21,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,367,1,0,0,0,364,366,2,48,57,
0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,371,
1,0,0,0,369,367,1,0,0,0,370,360,1,0,0,0,370,371,1,0,0,0,371,100,1,0,0,0,
372,374,2,48,57,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,
1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,380,5,46,0,0,379,381,2,48,57,
0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,391,
1,0,0,0,384,386,2,48,57,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,
0,387,388,1,0,0,0,388,389,1,0,0,0,389,391,5,46,0,0,390,375,1,0,0,0,390,385,
1,0,0,0,391,402,1,0,0,0,392,394,7,8,0,0,393,395,7,21,0,0,394,393,1,0,0,0,
394,395,1,0,0,0,395,399,1,0,0,0,396,398,2,48,57,0,397,396,1,0,0,0,398,401,
1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,
402,392,1,0,0,0,402,403,1,0,0,0,403,102,1,0,0,0,404,405,7,2,0,0,405,406,
7,10,0,0,406,407,7,16,0,0,407,414,7,8,0,0,408,409,7,9,0,0,409,410,7,19,0,
0,410,411,7,7,0,0,411,412,7,15,0,0,412,414,7,8,0,0,413,404,1,0,0,0,413,408,
1,0,0,0,414,104,1,0,0,0,415,416,7,14,0,0,416,417,7,8,0,0,417,418,7,10,0,
0,418,106,1,0,0,0,419,420,7,15,0,0,420,421,7,22,0,0,421,422,7,16,0,0,422,
423,7,19,0,0,423,424,7,10,0,0,424,425,7,8,0,0,425,426,7,18,0,0,426,108,1,
0,0,0,427,428,7,17,0,0,428,429,7,16,0,0,429,430,7,12,0,0,430,431,7,8,0,0,
431,432,7,18,0,0,432,110,1,0,0,0,433,437,7,23,0,0,434,436,7,24,0,0,435,434,
1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,112,1,0,0,0,
439,437,1,0,0,0,440,442,3,115,57,0,441,443,8,25,0,0,442,441,1,0,0,0,443,
444,1,0,0,0,444,445,1,0,0,0,444,442,1,0,0,0,445,446,1,0,0,0,446,447,3,117,
58,0,447,459,1,0,0,0,448,449,3,115,57,0,449,451,3,115,57,0,450,452,8,25,
0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,453,451,1,0,0,0,454,
455,1,0,0,0,455,456,3,117,58,0,456,457,3,117,58,0,457,459,1,0,0,0,458,440,
1,0,0,0,458,448,1,0,0,0,459,114,1,0,0,0,460,461,5,91,0,0,461,116,1,0,0,0,
462,463,5,93,0,0,463,118,1,0,0,0,464,465,7,26,0,0,465,120,1,0,0,0,466,470,
5,39,0,0,467,469,9,0,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,471,1,0,0,0,
470,468,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,485,5,39,0,0,474,480,
5,34,0,0,475,476,5,92,0,0,476,479,5,34,0,0,477,479,8,27,0,0,478,475,1,0,
0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,
483,1,0,0,0,482,480,1,0,0,0,483,485,5,34,0,0,484,466,1,0,0,0,484,474,1,0,
0,0,485,122,1,0,0,0,39,0,143,151,158,163,168,173,177,184,191,196,201,291,
302,307,313,337,344,349,358,362,367,370,375,382,387,390,394,399,402,413,
437,444,453,458,470,478,480,484,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FormulaLexer extends antlr4.Lexer {

    static grammarFileName = "Formula.g";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "','", "')'", "'<-'", "':'", "'!'", 
                         "'not'", "'.'", null, null, null, null, null, "'while'", 
                         "'for'", "'from'", "'in'", "'to'", "'by'", "'loop'", 
                         "'if'", "'then'", "'else'", "'function'", "'end'", 
                         "'return'", "'new'", "'try'", "'catch'", "'throw'", 
                         null, "'xor'", null, null, null, "'<'", "'<='", 
                         "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", null, 
                         "'^'", null, null, "'{'", "'}'", null, null, null, 
                         "'per'", "'squared'", "'cubed'", null, null, "'['", 
                         "']'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, "COMMENT", "LINE_COMMENT", "R__", "R_", 
                          "NEWLINES", "WHILESTATEMENT", "FORSTATEMENT", 
                          "FROMSTATEMENT", "INSTATEMENT", "TOSTATEMENT", 
                          "BYSTATEMENT", "LOOPSTATEMENT", "IFSTATEMENT", 
                          "THENSTATEMENT", "ELSESTATEMENT", "FUNCTIONSTATEMENT", 
                          "ENDBLOCK", "RETURNSTATEMENT", "NEWSTATEMENT", 
                          "TRYSTATEMENT", "CATCHSTATEMENT", "THROWSTATEMENT", 
                          "OR", "XOR", "AND", "EQUALS", "NOTEQUALS", "LT", 
                          "LTEQ", "GT", "GTEQ", "PLUS", "MINUS", "MULT", 
                          "DIV", "MOD", "POW", "LARR", "RARR", "LCURL", 
                          "RCURL", "INTEGER", "FLOAT", "BOOL", "PER", "SQUARED", 
                          "CUBED", "IDENT", "PRIMITIVE", "LBRACKET", "RBRACKET", 
                          "SPACE", "STRING" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "COMMENT", "LINE_COMMENT", "R__", "R_", "NEWLINES", 
                      "WHILESTATEMENT", "FORSTATEMENT", "FROMSTATEMENT", 
                      "INSTATEMENT", "TOSTATEMENT", "BYSTATEMENT", "LOOPSTATEMENT", 
                      "IFSTATEMENT", "THENSTATEMENT", "ELSESTATEMENT", "FUNCTIONSTATEMENT", 
                      "ENDBLOCK", "RETURNSTATEMENT", "NEWSTATEMENT", "TRYSTATEMENT", 
                      "CATCHSTATEMENT", "THROWSTATEMENT", "OR", "XOR", "AND", 
                      "EQUALS", "NOTEQUALS", "LT", "LTEQ", "GT", "GTEQ", 
                      "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", "LARR", 
                      "RARR", "LCURL", "RCURL", "INTEGER", "FLOAT", "BOOL", 
                      "PER", "SQUARED", "CUBED", "IDENT", "PRIMITIVE", "LBRACKET", 
                      "RBRACKET", "SPACE", "STRING" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

FormulaLexer.EOF = antlr4.Token.EOF;
FormulaLexer.T__0 = 1;
FormulaLexer.T__1 = 2;
FormulaLexer.T__2 = 3;
FormulaLexer.T__3 = 4;
FormulaLexer.T__4 = 5;
FormulaLexer.T__5 = 6;
FormulaLexer.T__6 = 7;
FormulaLexer.T__7 = 8;
FormulaLexer.COMMENT = 9;
FormulaLexer.LINE_COMMENT = 10;
FormulaLexer.R__ = 11;
FormulaLexer.R_ = 12;
FormulaLexer.NEWLINES = 13;
FormulaLexer.WHILESTATEMENT = 14;
FormulaLexer.FORSTATEMENT = 15;
FormulaLexer.FROMSTATEMENT = 16;
FormulaLexer.INSTATEMENT = 17;
FormulaLexer.TOSTATEMENT = 18;
FormulaLexer.BYSTATEMENT = 19;
FormulaLexer.LOOPSTATEMENT = 20;
FormulaLexer.IFSTATEMENT = 21;
FormulaLexer.THENSTATEMENT = 22;
FormulaLexer.ELSESTATEMENT = 23;
FormulaLexer.FUNCTIONSTATEMENT = 24;
FormulaLexer.ENDBLOCK = 25;
FormulaLexer.RETURNSTATEMENT = 26;
FormulaLexer.NEWSTATEMENT = 27;
FormulaLexer.TRYSTATEMENT = 28;
FormulaLexer.CATCHSTATEMENT = 29;
FormulaLexer.THROWSTATEMENT = 30;
FormulaLexer.OR = 31;
FormulaLexer.XOR = 32;
FormulaLexer.AND = 33;
FormulaLexer.EQUALS = 34;
FormulaLexer.NOTEQUALS = 35;
FormulaLexer.LT = 36;
FormulaLexer.LTEQ = 37;
FormulaLexer.GT = 38;
FormulaLexer.GTEQ = 39;
FormulaLexer.PLUS = 40;
FormulaLexer.MINUS = 41;
FormulaLexer.MULT = 42;
FormulaLexer.DIV = 43;
FormulaLexer.MOD = 44;
FormulaLexer.POW = 45;
FormulaLexer.LARR = 46;
FormulaLexer.RARR = 47;
FormulaLexer.LCURL = 48;
FormulaLexer.RCURL = 49;
FormulaLexer.INTEGER = 50;
FormulaLexer.FLOAT = 51;
FormulaLexer.BOOL = 52;
FormulaLexer.PER = 53;
FormulaLexer.SQUARED = 54;
FormulaLexer.CUBED = 55;
FormulaLexer.IDENT = 56;
FormulaLexer.PRIMITIVE = 57;
FormulaLexer.LBRACKET = 58;
FormulaLexer.RBRACKET = 59;
FormulaLexer.SPACE = 60;
FormulaLexer.STRING = 61;



