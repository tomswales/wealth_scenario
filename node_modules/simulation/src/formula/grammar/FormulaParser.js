// @ts-nocheck
/* eslint-disable */


import antlr4 from "../../../vendor/antlr4-all.js";

const serializedATN = [4,1,61,1396,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,5,0,98,8,
0,10,0,12,0,101,9,0,1,0,1,0,4,0,105,8,0,11,0,12,0,106,1,0,5,0,110,8,0,10,
0,12,0,113,9,0,1,0,5,0,116,8,0,10,0,12,0,119,9,0,3,0,121,8,0,1,0,1,0,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,135,8,1,1,2,1,2,5,2,139,8,2,10,2,
12,2,142,9,2,1,2,1,2,1,3,5,3,147,8,3,10,3,12,3,150,9,3,1,3,1,3,4,3,154,8,
3,11,3,12,3,155,1,3,5,3,159,8,3,10,3,12,3,162,9,3,1,3,5,3,165,8,3,10,3,12,
3,168,9,3,3,3,170,8,3,1,4,1,4,5,4,174,8,4,10,4,12,4,177,9,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,194,8,5,10,5,12,5,197,
9,5,1,5,1,5,5,5,201,8,5,10,5,12,5,204,9,5,1,5,1,5,5,5,208,8,5,10,5,12,5,
211,9,5,1,5,1,5,5,5,215,8,5,10,5,12,5,218,9,5,1,5,1,5,5,5,222,8,5,10,5,12,
5,225,9,5,1,5,3,5,228,8,5,1,5,1,5,3,5,232,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
6,1,6,1,6,1,6,1,6,5,6,245,8,6,10,6,12,6,248,9,6,1,6,1,6,1,6,3,6,253,8,6,
1,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,262,8,7,10,7,12,7,265,9,7,1,7,1,7,5,7,269,
8,7,10,7,12,7,272,9,7,1,7,3,7,275,8,7,1,7,1,7,3,7,279,8,7,1,7,1,7,1,7,1,
7,1,7,5,7,286,8,7,10,7,12,7,289,9,7,1,7,1,7,5,7,293,8,7,10,7,12,7,296,9,
7,1,7,3,7,299,8,7,1,7,1,7,3,7,303,8,7,5,7,305,8,7,10,7,12,7,308,9,7,1,7,
1,7,1,7,1,7,3,7,314,8,7,3,7,316,8,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
5,8,327,8,8,10,8,12,8,330,9,8,1,8,1,8,5,8,334,8,8,10,8,12,8,337,9,8,1,8,
1,8,5,8,341,8,8,10,8,12,8,344,9,8,1,8,1,8,5,8,348,8,8,10,8,12,8,351,9,8,
1,8,1,8,5,8,355,8,8,10,8,12,8,358,9,8,1,8,1,8,5,8,362,8,8,10,8,12,8,365,
9,8,1,8,5,8,368,8,8,10,8,12,8,371,9,8,3,8,373,8,8,1,8,5,8,376,8,8,10,8,12,
8,379,9,8,1,8,1,8,5,8,383,8,8,10,8,12,8,386,9,8,1,8,1,8,5,8,390,8,8,10,8,
12,8,393,9,8,1,8,1,8,5,8,397,8,8,10,8,12,8,400,9,8,1,8,5,8,403,8,8,10,8,
12,8,406,9,8,3,8,408,8,8,1,8,5,8,411,8,8,10,8,12,8,414,9,8,1,8,1,8,1,8,3,
8,419,8,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,429,8,9,1,9,1,9,1,9,1,9,1,
9,1,9,3,9,437,8,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,5,11,
450,8,11,10,11,12,11,453,9,11,1,11,1,11,5,11,457,8,11,10,11,12,11,460,9,
11,1,11,1,11,5,11,464,8,11,10,11,12,11,467,9,11,1,11,1,11,5,11,471,8,11,
10,11,12,11,474,9,11,1,11,1,11,5,11,478,8,11,10,11,12,11,481,9,11,1,11,1,
11,5,11,485,8,11,10,11,12,11,488,9,11,1,11,5,11,491,8,11,10,11,12,11,494,
9,11,3,11,496,8,11,1,11,5,11,499,8,11,10,11,12,11,502,9,11,1,11,1,11,5,11,
506,8,11,10,11,12,11,509,9,11,1,11,1,11,5,11,513,8,11,10,11,12,11,516,9,
11,1,11,1,11,5,11,520,8,11,10,11,12,11,523,9,11,1,11,5,11,526,8,11,10,11,
12,11,529,9,11,3,11,531,8,11,1,11,5,11,534,8,11,10,11,12,11,537,9,11,1,11,
1,11,1,11,3,11,542,8,11,1,11,1,11,1,11,1,11,1,11,5,11,549,8,11,10,11,12,
11,552,9,11,1,11,3,11,555,8,11,1,12,1,12,5,12,559,8,12,10,12,12,12,562,9,
12,1,12,1,12,5,12,566,8,12,10,12,12,12,569,9,12,1,12,1,12,5,12,573,8,12,
10,12,12,12,576,9,12,1,12,1,12,5,12,580,8,12,10,12,12,12,583,9,12,1,12,1,
12,5,12,587,8,12,10,12,12,12,590,9,12,1,12,1,12,5,12,594,8,12,10,12,12,12,
597,9,12,1,12,5,12,600,8,12,10,12,12,12,603,9,12,3,12,605,8,12,1,12,1,12,
5,12,609,8,12,10,12,12,12,612,9,12,1,12,1,12,5,12,616,8,12,10,12,12,12,619,
9,12,1,12,1,12,5,12,623,8,12,10,12,12,12,626,9,12,1,12,5,12,629,8,12,10,
12,12,12,632,9,12,3,12,634,8,12,1,12,5,12,637,8,12,10,12,12,12,640,9,12,
1,12,1,12,5,12,644,8,12,10,12,12,12,647,9,12,1,12,1,12,5,12,651,8,12,10,
12,12,12,654,9,12,1,12,1,12,1,12,3,12,659,8,12,1,12,5,12,662,8,12,10,12,
12,12,665,9,12,1,12,1,12,5,12,669,8,12,10,12,12,12,672,9,12,1,12,1,12,3,
12,676,8,12,5,12,678,8,12,10,12,12,12,681,9,12,1,12,5,12,684,8,12,10,12,
12,12,687,9,12,1,12,1,12,5,12,691,8,12,10,12,12,12,694,9,12,1,12,3,12,697,
8,12,1,13,1,13,3,13,701,8,13,1,14,1,14,5,14,705,8,14,10,14,12,14,708,9,14,
1,14,1,14,5,14,712,8,14,10,14,12,14,715,9,14,1,14,5,14,718,8,14,10,14,12,
14,721,9,14,1,15,1,15,5,15,725,8,15,10,15,12,15,728,9,15,1,15,1,15,5,15,
732,8,15,10,15,12,15,735,9,15,1,15,5,15,738,8,15,10,15,12,15,741,9,15,1,
16,1,16,5,16,745,8,16,10,16,12,16,748,9,16,1,16,1,16,5,16,752,8,16,10,16,
12,16,755,9,16,1,16,5,16,758,8,16,10,16,12,16,761,9,16,1,17,1,17,5,17,765,
8,17,10,17,12,17,768,9,17,1,17,1,17,5,17,772,8,17,10,17,12,17,775,9,17,1,
17,5,17,778,8,17,10,17,12,17,781,9,17,1,18,1,18,5,18,785,8,18,10,18,12,18,
788,9,18,1,18,1,18,5,18,792,8,18,10,18,12,18,795,9,18,1,18,5,18,798,8,18,
10,18,12,18,801,9,18,1,19,1,19,5,19,805,8,19,10,19,12,19,808,9,19,1,19,1,
19,5,19,812,8,19,10,19,12,19,815,9,19,1,19,5,19,818,8,19,10,19,12,19,821,
9,19,1,20,1,20,5,20,825,8,20,10,20,12,20,828,9,20,1,20,1,20,5,20,832,8,20,
10,20,12,20,835,9,20,1,20,5,20,838,8,20,10,20,12,20,841,9,20,1,21,1,21,1,
21,3,21,846,8,21,1,21,1,21,3,21,850,8,21,1,22,1,22,5,22,854,8,22,10,22,12,
22,857,9,22,1,22,1,22,3,22,861,8,22,1,23,1,23,5,23,865,8,23,10,23,12,23,
868,9,23,1,23,1,23,5,23,872,8,23,10,23,12,23,875,9,23,1,23,5,23,878,8,23,
10,23,12,23,881,9,23,1,24,1,24,5,24,885,8,24,10,24,12,24,888,9,24,1,24,1,
24,3,24,892,8,24,1,25,1,25,5,25,896,8,25,10,25,12,25,899,9,25,1,25,1,25,
3,25,903,8,25,1,26,1,26,1,27,1,27,1,27,5,27,910,8,27,10,27,12,27,913,9,27,
1,28,1,28,5,28,917,8,28,10,28,12,28,920,9,28,1,28,1,28,5,28,924,8,28,10,
28,12,28,927,9,28,1,28,1,28,5,28,931,8,28,10,28,12,28,934,9,28,1,28,5,28,
937,8,28,10,28,12,28,940,9,28,3,28,942,8,28,1,28,5,28,945,8,28,10,28,12,
28,948,9,28,1,28,1,28,1,29,1,29,5,29,954,8,29,10,29,12,29,957,9,29,1,29,
1,29,5,29,961,8,29,10,29,12,29,964,9,29,1,29,1,29,1,29,3,29,969,8,29,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,980,8,30,1,31,1,31,5,31,984,
8,31,10,31,12,31,987,9,31,1,31,1,31,1,31,1,31,5,31,993,8,31,10,31,12,31,
996,9,31,1,31,1,31,1,32,1,32,5,32,1002,8,32,10,32,12,32,1005,9,32,1,32,1,
32,5,32,1009,8,32,10,32,12,32,1012,9,32,1,32,1,32,5,32,1016,8,32,10,32,12,
32,1019,9,32,1,32,5,32,1022,8,32,10,32,12,32,1025,9,32,3,32,1027,8,32,1,
32,5,32,1030,8,32,10,32,12,32,1033,9,32,1,32,1,32,1,32,5,32,1038,8,32,10,
32,12,32,1041,9,32,1,32,1,32,5,32,1045,8,32,10,32,12,32,1048,9,32,1,32,1,
32,5,32,1052,8,32,10,32,12,32,1055,9,32,1,32,5,32,1058,8,32,10,32,12,32,
1061,9,32,3,32,1063,8,32,1,32,5,32,1066,8,32,10,32,12,32,1069,9,32,1,32,
1,32,1,32,5,32,1074,8,32,10,32,12,32,1077,9,32,1,32,1,32,5,32,1081,8,32,
10,32,12,32,1084,9,32,1,32,1,32,5,32,1088,8,32,10,32,12,32,1091,9,32,1,32,
5,32,1094,8,32,10,32,12,32,1097,9,32,3,32,1099,8,32,1,32,5,32,1102,8,32,
10,32,12,32,1105,9,32,1,32,1,32,1,32,5,32,1110,8,32,10,32,12,32,1113,9,32,
1,32,1,32,5,32,1117,8,32,10,32,12,32,1120,9,32,1,32,1,32,5,32,1124,8,32,
10,32,12,32,1127,9,32,1,32,5,32,1130,8,32,10,32,12,32,1133,9,32,3,32,1135,
8,32,1,32,5,32,1138,8,32,10,32,12,32,1141,9,32,1,32,3,32,1144,8,32,1,33,
1,33,1,33,1,33,3,33,1150,8,33,1,34,1,34,1,34,1,34,1,34,3,34,1157,8,34,1,
35,1,35,3,35,1161,8,35,1,36,1,36,5,36,1165,8,36,10,36,12,36,1168,9,36,1,
36,1,36,3,36,1172,8,36,1,36,5,36,1175,8,36,10,36,12,36,1178,9,36,1,36,1,
36,5,36,1182,8,36,10,36,12,36,1185,9,36,1,36,1,36,3,36,1189,8,36,5,36,1191,
8,36,10,36,12,36,1194,9,36,1,36,5,36,1197,8,36,10,36,12,36,1200,9,36,1,36,
1,36,1,36,5,36,1205,8,36,10,36,12,36,1208,9,36,1,36,1,36,3,36,1212,8,36,
1,36,5,36,1215,8,36,10,36,12,36,1218,9,36,1,36,1,36,5,36,1222,8,36,10,36,
12,36,1225,9,36,1,36,1,36,3,36,1229,8,36,5,36,1231,8,36,10,36,12,36,1234,
9,36,1,36,5,36,1237,8,36,10,36,12,36,1240,9,36,1,36,3,36,1243,8,36,1,37,
1,37,4,37,1247,8,37,11,37,12,37,1248,1,38,1,38,1,39,1,39,5,39,1255,8,39,
10,39,12,39,1258,9,39,1,39,1,39,5,39,1262,8,39,10,39,12,39,1265,9,39,1,39,
1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,5,42,1279,8,42,10,
42,12,42,1282,9,42,1,43,1,43,5,43,1286,8,43,10,43,12,43,1289,9,43,1,43,1,
43,5,43,1293,8,43,10,43,12,43,1296,9,43,1,43,5,43,1299,8,43,10,43,12,43,
1302,9,43,1,44,1,44,5,44,1306,8,44,10,44,12,44,1309,9,44,1,44,1,44,1,44,
5,44,1314,8,44,10,44,12,44,1317,9,44,1,44,1,44,1,44,3,44,1322,8,44,1,44,
1,44,3,44,1326,8,44,1,44,1,44,1,44,3,44,1331,8,44,1,44,1,44,3,44,1335,8,
44,3,44,1337,8,44,1,45,1,45,5,45,1341,8,45,10,45,12,45,1344,9,45,1,45,1,
45,5,45,1348,8,45,10,45,12,45,1351,9,45,1,45,3,45,1354,8,45,1,45,5,45,1357,
8,45,10,45,12,45,1360,9,45,1,45,5,45,1363,8,45,10,45,12,45,1366,9,45,1,46,
1,46,1,46,5,46,1371,8,46,10,46,12,46,1374,9,46,1,46,1,46,5,46,1378,8,46,
10,46,12,46,1381,9,46,1,46,1,46,5,46,1385,8,46,10,46,12,46,1388,9,46,1,46,
1,46,3,46,1392,8,46,1,47,1,47,1,47,0,0,48,0,2,4,6,8,10,12,14,16,18,20,22,
24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
72,74,76,78,80,82,84,86,88,90,92,94,0,9,1,0,11,12,1,0,34,35,1,0,36,39,1,
0,40,41,1,0,42,44,1,0,6,7,3,0,42,42,56,56,61,61,1,0,50,51,1,0,42,43,1573,
0,99,1,0,0,0,2,134,1,0,0,0,4,136,1,0,0,0,6,148,1,0,0,0,8,171,1,0,0,0,10,
187,1,0,0,0,12,238,1,0,0,0,14,259,1,0,0,0,16,322,1,0,0,0,18,425,1,0,0,0,
20,443,1,0,0,0,22,447,1,0,0,0,24,696,1,0,0,0,26,698,1,0,0,0,28,702,1,0,0,
0,30,722,1,0,0,0,32,742,1,0,0,0,34,762,1,0,0,0,36,782,1,0,0,0,38,802,1,0,
0,0,40,822,1,0,0,0,42,842,1,0,0,0,44,860,1,0,0,0,46,862,1,0,0,0,48,891,1,
0,0,0,50,902,1,0,0,0,52,904,1,0,0,0,54,906,1,0,0,0,56,914,1,0,0,0,58,968,
1,0,0,0,60,979,1,0,0,0,62,981,1,0,0,0,64,1143,1,0,0,0,66,1145,1,0,0,0,68,
1156,1,0,0,0,70,1160,1,0,0,0,72,1242,1,0,0,0,74,1246,1,0,0,0,76,1250,1,0,
0,0,78,1252,1,0,0,0,80,1268,1,0,0,0,82,1270,1,0,0,0,84,1273,1,0,0,0,86,1283,
1,0,0,0,88,1336,1,0,0,0,90,1338,1,0,0,0,92,1391,1,0,0,0,94,1393,1,0,0,0,
96,98,7,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,
100,120,1,0,0,0,101,99,1,0,0,0,102,111,3,2,1,0,103,105,5,11,0,0,104,103,
1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,
108,110,3,2,1,0,109,104,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,
1,0,0,0,112,117,1,0,0,0,113,111,1,0,0,0,114,116,7,0,0,0,115,114,1,0,0,0,
116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,121,1,0,0,0,119,117,
1,0,0,0,120,102,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,123,5,0,0,1,
123,1,1,0,0,0,124,135,3,24,12,0,125,135,3,28,14,0,126,135,3,8,4,0,127,135,
3,10,5,0,128,135,3,12,6,0,129,135,3,14,7,0,130,135,3,16,8,0,131,135,3,4,
2,0,132,135,3,18,9,0,133,135,3,20,10,0,134,124,1,0,0,0,134,125,1,0,0,0,134,
126,1,0,0,0,134,127,1,0,0,0,134,128,1,0,0,0,134,129,1,0,0,0,134,130,1,0,
0,0,134,131,1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,3,1,0,0,0,136,140,
5,26,0,0,137,139,5,12,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,3,28,14,0,144,
5,1,0,0,0,145,147,7,0,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,
0,148,149,1,0,0,0,149,169,1,0,0,0,150,148,1,0,0,0,151,160,3,2,1,0,152,154,
5,11,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,
156,157,1,0,0,0,157,159,3,2,1,0,158,153,1,0,0,0,159,162,1,0,0,0,160,158,
1,0,0,0,160,161,1,0,0,0,161,166,1,0,0,0,162,160,1,0,0,0,163,165,7,0,0,0,
164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,170,
1,0,0,0,168,166,1,0,0,0,169,151,1,0,0,0,169,170,1,0,0,0,170,7,1,0,0,0,171,
175,5,14,0,0,172,174,5,12,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,
0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,3,28,14,0,
179,180,5,11,0,0,180,181,3,6,3,0,181,182,1,0,0,0,182,183,5,11,0,0,183,184,
5,25,0,0,184,185,5,12,0,0,185,186,5,20,0,0,186,9,1,0,0,0,187,188,5,15,0,
0,188,189,5,12,0,0,189,190,5,56,0,0,190,191,5,12,0,0,191,195,5,16,0,0,192,
194,5,12,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,
0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,202,3,28,14,0,199,201,5,12,0,0,200,
199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,
0,0,204,202,1,0,0,0,205,209,5,18,0,0,206,208,5,12,0,0,207,206,1,0,0,0,208,
211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,
0,0,212,227,3,28,14,0,213,215,5,12,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,
214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,223,5,19,
0,0,220,222,5,12,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,
224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,228,3,28,14,0,227,216,1,
0,0,0,227,228,1,0,0,0,228,231,1,0,0,0,229,230,5,11,0,0,230,232,3,6,3,0,231,
229,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,234,5,11,0,0,234,235,5,25,
0,0,235,236,5,12,0,0,236,237,5,20,0,0,237,11,1,0,0,0,238,239,5,15,0,0,239,
240,5,12,0,0,240,241,5,56,0,0,241,242,5,12,0,0,242,246,5,17,0,0,243,245,
5,12,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,
247,249,1,0,0,0,248,246,1,0,0,0,249,252,3,28,14,0,250,251,5,11,0,0,251,253,
3,6,3,0,252,250,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,11,0,0,
255,256,5,25,0,0,256,257,5,12,0,0,257,258,5,20,0,0,258,13,1,0,0,0,259,263,
5,21,0,0,260,262,5,12,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,
0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,270,3,28,14,0,267,
269,7,0,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,
0,0,271,274,1,0,0,0,272,270,1,0,0,0,273,275,5,22,0,0,274,273,1,0,0,0,274,
275,1,0,0,0,275,278,1,0,0,0,276,277,5,11,0,0,277,279,3,6,3,0,278,276,1,0,
0,0,278,279,1,0,0,0,279,306,1,0,0,0,280,281,5,11,0,0,281,282,5,23,0,0,282,
283,5,12,0,0,283,287,5,21,0,0,284,286,5,12,0,0,285,284,1,0,0,0,286,289,1,
0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,
294,3,28,14,0,291,293,7,0,0,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,
0,0,0,294,295,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,297,299,5,22,0,0,298,
297,1,0,0,0,298,299,1,0,0,0,299,302,1,0,0,0,300,301,5,11,0,0,301,303,3,6,
3,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,280,1,0,0,0,305,
308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,315,1,0,0,0,308,306,1,0,
0,0,309,310,5,11,0,0,310,313,5,23,0,0,311,312,5,11,0,0,312,314,3,6,3,0,313,
311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,309,1,0,0,0,315,316,1,0,
0,0,316,317,1,0,0,0,317,318,5,11,0,0,318,319,5,25,0,0,319,320,5,12,0,0,320,
321,5,21,0,0,321,15,1,0,0,0,322,323,5,24,0,0,323,324,5,12,0,0,324,328,5,
56,0,0,325,327,5,12,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,
328,329,1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,331,407,5,1,0,0,332,334,
5,12,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,
336,338,1,0,0,0,337,335,1,0,0,0,338,372,5,56,0,0,339,341,5,12,0,0,340,339,
1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,
344,342,1,0,0,0,345,349,5,34,0,0,346,348,5,12,0,0,347,346,1,0,0,0,348,351,
1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,
352,373,3,68,34,0,353,355,5,12,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,
1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,363,5,2,0,0,
360,362,5,12,0,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,
1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,368,5,56,0,0,367,356,1,0,0,0,
368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,373,1,0,0,0,371,369,
1,0,0,0,372,342,1,0,0,0,372,369,1,0,0,0,373,404,1,0,0,0,374,376,5,12,0,0,
375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,
1,0,0,0,379,377,1,0,0,0,380,384,5,2,0,0,381,383,5,12,0,0,382,381,1,0,0,0,
383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,
1,0,0,0,387,391,5,56,0,0,388,390,5,12,0,0,389,388,1,0,0,0,390,393,1,0,0,
0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,398,
5,34,0,0,395,397,5,12,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,
0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,403,3,68,34,0,402,
377,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,408,1,0,
0,0,406,404,1,0,0,0,407,335,1,0,0,0,407,408,1,0,0,0,408,412,1,0,0,0,409,
411,5,12,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,
0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,418,5,3,0,0,416,417,5,11,0,0,417,
419,3,6,3,0,418,416,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,5,11,
0,0,421,422,5,25,0,0,422,423,5,12,0,0,423,424,5,24,0,0,424,17,1,0,0,0,425,
428,5,28,0,0,426,427,5,11,0,0,427,429,3,6,3,0,428,426,1,0,0,0,428,429,1,
0,0,0,429,430,1,0,0,0,430,431,5,11,0,0,431,432,5,29,0,0,432,433,5,12,0,0,
433,436,5,56,0,0,434,435,5,11,0,0,435,437,3,6,3,0,436,434,1,0,0,0,436,437,
1,0,0,0,437,438,1,0,0,0,438,439,5,11,0,0,439,440,5,25,0,0,440,441,5,12,0,
0,441,442,5,28,0,0,442,19,1,0,0,0,443,444,5,30,0,0,444,445,5,12,0,0,445,
446,3,58,29,0,446,21,1,0,0,0,447,451,5,24,0,0,448,450,5,12,0,0,449,448,1,
0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
451,1,0,0,0,454,530,5,1,0,0,455,457,5,12,0,0,456,455,1,0,0,0,457,460,1,0,
0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,
495,5,56,0,0,462,464,5,12,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,
0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,0,0,0,468,472,5,34,0,0,469,
471,5,12,0,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,
0,0,473,475,1,0,0,0,474,472,1,0,0,0,475,496,3,68,34,0,476,478,5,12,0,0,477,
476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,1,0,
0,0,481,479,1,0,0,0,482,486,5,2,0,0,483,485,5,12,0,0,484,483,1,0,0,0,485,
488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,
0,0,489,491,5,56,0,0,490,479,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,
493,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,495,465,1,0,0,0,495,492,1,0,
0,0,496,527,1,0,0,0,497,499,5,12,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,
498,1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,500,1,0,0,0,503,507,5,2,
0,0,504,506,5,12,0,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,
508,1,0,0,0,508,510,1,0,0,0,509,507,1,0,0,0,510,514,5,56,0,0,511,513,5,12,
0,0,512,511,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,
517,1,0,0,0,516,514,1,0,0,0,517,521,5,34,0,0,518,520,5,12,0,0,519,518,1,
0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,
521,1,0,0,0,524,526,3,68,34,0,525,500,1,0,0,0,526,529,1,0,0,0,527,525,1,
0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,530,458,1,0,0,0,530,
531,1,0,0,0,531,535,1,0,0,0,532,534,5,12,0,0,533,532,1,0,0,0,534,537,1,0,
0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,
554,5,3,0,0,539,540,5,11,0,0,540,542,3,6,3,0,541,539,1,0,0,0,541,542,1,0,
0,0,542,543,1,0,0,0,543,544,5,11,0,0,544,545,5,25,0,0,545,546,5,12,0,0,546,
555,5,24,0,0,547,549,5,12,0,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,
0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,555,3,2,1,0,554,
541,1,0,0,0,554,550,1,0,0,0,555,23,1,0,0,0,556,560,5,56,0,0,557,559,5,12,
0,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
563,1,0,0,0,562,560,1,0,0,0,563,633,5,1,0,0,564,566,5,12,0,0,565,564,1,0,
0,0,566,569,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,
567,1,0,0,0,570,604,5,56,0,0,571,573,5,12,0,0,572,571,1,0,0,0,573,576,1,
0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,0,577,
581,5,34,0,0,578,580,5,12,0,0,579,578,1,0,0,0,580,583,1,0,0,0,581,579,1,
0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,605,3,68,34,0,
585,587,5,12,0,0,586,585,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,
1,0,0,0,589,591,1,0,0,0,590,588,1,0,0,0,591,595,5,2,0,0,592,594,5,12,0,0,
593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,
1,0,0,0,597,595,1,0,0,0,598,600,5,56,0,0,599,588,1,0,0,0,600,603,1,0,0,0,
601,599,1,0,0,0,601,602,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,604,574,
1,0,0,0,604,601,1,0,0,0,605,630,1,0,0,0,606,610,5,2,0,0,607,609,5,12,0,0,
608,607,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,
1,0,0,0,612,610,1,0,0,0,613,617,5,56,0,0,614,616,5,12,0,0,615,614,1,0,0,
0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,
1,0,0,0,620,624,5,34,0,0,621,623,5,12,0,0,622,621,1,0,0,0,623,626,1,0,0,
0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,624,1,0,0,0,627,629,
3,68,34,0,628,606,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,
0,631,634,1,0,0,0,632,630,1,0,0,0,633,567,1,0,0,0,633,634,1,0,0,0,634,638,
1,0,0,0,635,637,5,12,0,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,
638,639,1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,645,5,3,0,0,642,644,
5,12,0,0,643,642,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,
646,648,1,0,0,0,647,645,1,0,0,0,648,652,5,4,0,0,649,651,5,12,0,0,650,649,
1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,
654,652,1,0,0,0,655,697,3,28,14,0,656,659,5,57,0,0,657,659,3,26,13,0,658,
656,1,0,0,0,658,657,1,0,0,0,659,679,1,0,0,0,660,662,5,12,0,0,661,660,1,0,
0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,
663,1,0,0,0,666,670,5,2,0,0,667,669,5,12,0,0,668,667,1,0,0,0,669,672,1,0,
0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,675,1,0,0,0,672,670,1,0,0,0,673,
676,5,57,0,0,674,676,3,26,13,0,675,673,1,0,0,0,675,674,1,0,0,0,676,678,1,
0,0,0,677,663,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,
685,1,0,0,0,681,679,1,0,0,0,682,684,5,12,0,0,683,682,1,0,0,0,684,687,1,0,
0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,685,1,0,0,0,688,
692,5,4,0,0,689,691,5,12,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,
0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,697,3,28,14,0,696,
556,1,0,0,0,696,658,1,0,0,0,697,25,1,0,0,0,698,700,5,56,0,0,699,701,3,70,
35,0,700,699,1,0,0,0,700,701,1,0,0,0,701,27,1,0,0,0,702,719,3,30,15,0,703,
705,5,12,0,0,704,703,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,
0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,713,5,31,0,0,710,712,5,12,0,0,711,
710,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,0,
0,0,715,713,1,0,0,0,716,718,3,30,15,0,717,706,1,0,0,0,718,721,1,0,0,0,719,
717,1,0,0,0,719,720,1,0,0,0,720,29,1,0,0,0,721,719,1,0,0,0,722,739,3,32,
16,0,723,725,5,12,0,0,724,723,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,726,
727,1,0,0,0,727,729,1,0,0,0,728,726,1,0,0,0,729,733,5,32,0,0,730,732,5,12,
0,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,
736,1,0,0,0,735,733,1,0,0,0,736,738,3,32,16,0,737,726,1,0,0,0,738,741,1,
0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,31,1,0,0,0,741,739,1,0,0,0,742,
759,3,34,17,0,743,745,5,12,0,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,1,
0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,753,5,33,0,0,750,
752,5,12,0,0,751,750,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,
0,0,754,756,1,0,0,0,755,753,1,0,0,0,756,758,3,34,17,0,757,746,1,0,0,0,758,
761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,33,1,0,0,0,761,759,1,0,0,
0,762,779,3,36,18,0,763,765,5,12,0,0,764,763,1,0,0,0,765,768,1,0,0,0,766,
764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,766,1,0,0,0,769,773,7,1,
0,0,770,772,5,12,0,0,771,770,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,
774,1,0,0,0,774,776,1,0,0,0,775,773,1,0,0,0,776,778,3,36,18,0,777,766,1,
0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,35,1,0,0,0,781,
779,1,0,0,0,782,799,3,38,19,0,783,785,5,12,0,0,784,783,1,0,0,0,785,788,1,
0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,786,1,0,0,0,789,
793,7,2,0,0,790,792,5,12,0,0,791,790,1,0,0,0,792,795,1,0,0,0,793,791,1,0,
0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,793,1,0,0,0,796,798,3,38,19,0,797,
786,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,37,1,0,0,
0,801,799,1,0,0,0,802,819,3,40,20,0,803,805,5,12,0,0,804,803,1,0,0,0,805,
808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,
0,0,809,813,7,3,0,0,810,812,5,12,0,0,811,810,1,0,0,0,812,815,1,0,0,0,813,
811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,813,1,0,0,0,816,818,3,40,
20,0,817,806,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,
39,1,0,0,0,821,819,1,0,0,0,822,839,3,42,21,0,823,825,5,12,0,0,824,823,1,
0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,
826,1,0,0,0,829,833,7,4,0,0,830,832,5,12,0,0,831,830,1,0,0,0,832,835,1,0,
0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,
838,3,42,21,0,837,826,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,
0,0,0,840,41,1,0,0,0,841,839,1,0,0,0,842,845,3,44,22,0,843,844,5,5,0,0,844,
846,3,44,22,0,845,843,1,0,0,0,845,846,1,0,0,0,846,849,1,0,0,0,847,848,5,
5,0,0,848,850,3,44,22,0,849,847,1,0,0,0,849,850,1,0,0,0,850,43,1,0,0,0,851,
855,5,41,0,0,852,854,5,12,0,0,853,852,1,0,0,0,854,857,1,0,0,0,855,853,1,
0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,855,1,0,0,0,858,861,3,46,23,0,
859,861,3,46,23,0,860,851,1,0,0,0,860,859,1,0,0,0,861,45,1,0,0,0,862,879,
3,50,25,0,863,865,5,12,0,0,864,863,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,
0,866,867,1,0,0,0,867,869,1,0,0,0,868,866,1,0,0,0,869,873,5,45,0,0,870,872,
5,12,0,0,871,870,1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,
874,876,1,0,0,0,875,873,1,0,0,0,876,878,3,48,24,0,877,866,1,0,0,0,878,881,
1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,47,1,0,0,0,881,879,1,0,0,0,882,
886,5,41,0,0,883,885,5,12,0,0,884,883,1,0,0,0,885,888,1,0,0,0,886,884,1,
0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,886,1,0,0,0,889,892,3,50,25,0,
890,892,3,50,25,0,891,882,1,0,0,0,891,890,1,0,0,0,892,49,1,0,0,0,893,897,
7,5,0,0,894,896,5,12,0,0,895,894,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,
897,898,1,0,0,0,898,900,1,0,0,0,899,897,1,0,0,0,900,903,3,52,26,0,901,903,
3,52,26,0,902,893,1,0,0,0,902,901,1,0,0,0,903,51,1,0,0,0,904,905,3,54,27,
0,905,53,1,0,0,0,906,911,3,58,29,0,907,910,3,70,35,0,908,910,3,56,28,0,909,
907,1,0,0,0,909,908,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,
0,0,912,55,1,0,0,0,913,911,1,0,0,0,914,941,5,1,0,0,915,917,5,12,0,0,916,
915,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,921,1,0,
0,0,920,918,1,0,0,0,921,938,3,28,14,0,922,924,5,12,0,0,923,922,1,0,0,0,924,
927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,925,1,0,
0,0,928,932,5,2,0,0,929,931,5,12,0,0,930,929,1,0,0,0,931,934,1,0,0,0,932,
930,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,932,1,0,0,0,935,937,3,28,
14,0,936,925,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,
942,1,0,0,0,940,938,1,0,0,0,941,918,1,0,0,0,941,942,1,0,0,0,942,946,1,0,
0,0,943,945,5,12,0,0,944,943,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,946,
947,1,0,0,0,947,949,1,0,0,0,948,946,1,0,0,0,949,950,5,3,0,0,950,57,1,0,0,
0,951,955,5,1,0,0,952,954,7,0,0,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,
1,0,0,0,955,956,1,0,0,0,956,958,1,0,0,0,957,955,1,0,0,0,958,962,3,28,14,
0,959,961,7,0,0,0,960,959,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,
1,0,0,0,963,965,1,0,0,0,964,962,1,0,0,0,965,966,5,3,0,0,966,969,1,0,0,0,
967,969,3,60,30,0,968,951,1,0,0,0,968,967,1,0,0,0,969,59,1,0,0,0,970,980,
3,80,40,0,971,980,5,52,0,0,972,980,3,94,47,0,973,980,3,62,31,0,974,980,5,
56,0,0,975,980,5,57,0,0,976,980,3,64,32,0,977,980,3,22,11,0,978,980,3,66,
33,0,979,970,1,0,0,0,979,971,1,0,0,0,979,972,1,0,0,0,979,973,1,0,0,0,979,
974,1,0,0,0,979,975,1,0,0,0,979,976,1,0,0,0,979,977,1,0,0,0,979,978,1,0,
0,0,980,61,1,0,0,0,981,985,5,48,0,0,982,984,5,12,0,0,983,982,1,0,0,0,984,
987,1,0,0,0,985,983,1,0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,985,1,0,
0,0,988,989,3,38,19,0,989,990,5,12,0,0,990,994,3,84,42,0,991,993,5,12,0,
0,992,991,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,
1,0,0,0,996,994,1,0,0,0,997,998,5,49,0,0,998,63,1,0,0,0,999,1026,5,46,0,
0,1000,1002,7,0,0,0,1001,1000,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,
0,1003,1004,1,0,0,0,1004,1006,1,0,0,0,1005,1003,1,0,0,0,1006,1023,3,78,39,
0,1007,1009,7,0,0,0,1008,1007,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,
0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,1010,1,0,0,0,1013,1017,5,2,0,
0,1014,1016,7,0,0,0,1015,1014,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,
0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1017,1,0,0,0,1020,1022,3,78,39,
0,1021,1010,1,0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,
0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1026,1003,1,0,0,0,1026,1027,1,0,0,
0,1027,1031,1,0,0,0,1028,1030,7,0,0,0,1029,1028,1,0,0,0,1030,1033,1,0,0,
0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,1031,1,0,0,
0,1034,1144,5,47,0,0,1035,1062,5,48,0,0,1036,1038,7,0,0,0,1037,1036,1,0,
0,0,1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,
0,0,1041,1039,1,0,0,0,1042,1059,3,78,39,0,1043,1045,7,0,0,0,1044,1043,1,
0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1049,1,
0,0,0,1048,1046,1,0,0,0,1049,1053,5,2,0,0,1050,1052,7,0,0,0,1051,1050,1,
0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,
0,0,0,1055,1053,1,0,0,0,1056,1058,3,78,39,0,1057,1046,1,0,0,0,1058,1061,
1,0,0,0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,1063,1,0,0,0,1061,1059,
1,0,0,0,1062,1039,1,0,0,0,1062,1063,1,0,0,0,1063,1067,1,0,0,0,1064,1066,
7,0,0,0,1065,1064,1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,
1,0,0,0,1068,1070,1,0,0,0,1069,1067,1,0,0,0,1070,1144,5,49,0,0,1071,1098,
5,46,0,0,1072,1074,7,0,0,0,1073,1072,1,0,0,0,1074,1077,1,0,0,0,1075,1073,
1,0,0,0,1075,1076,1,0,0,0,1076,1078,1,0,0,0,1077,1075,1,0,0,0,1078,1095,
3,28,14,0,1079,1081,7,0,0,0,1080,1079,1,0,0,0,1081,1084,1,0,0,0,1082,1080,
1,0,0,0,1082,1083,1,0,0,0,1083,1085,1,0,0,0,1084,1082,1,0,0,0,1085,1089,
5,2,0,0,1086,1088,7,0,0,0,1087,1086,1,0,0,0,1088,1091,1,0,0,0,1089,1087,
1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,0,1091,1089,1,0,0,0,1092,1094,
3,28,14,0,1093,1082,1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,
1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1098,1075,1,0,0,0,1098,1099,
1,0,0,0,1099,1103,1,0,0,0,1100,1102,7,0,0,0,1101,1100,1,0,0,0,1102,1105,
1,0,0,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1106,1,0,0,0,1105,1103,
1,0,0,0,1106,1144,5,47,0,0,1107,1134,5,48,0,0,1108,1110,7,0,0,0,1109,1108,
1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1114,
1,0,0,0,1113,1111,1,0,0,0,1114,1131,3,28,14,0,1115,1117,7,0,0,0,1116,1115,
1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1121,
1,0,0,0,1120,1118,1,0,0,0,1121,1125,5,2,0,0,1122,1124,7,0,0,0,1123,1122,
1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,
1,0,0,0,1127,1125,1,0,0,0,1128,1130,3,28,14,0,1129,1118,1,0,0,0,1130,1133,
1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1135,1,0,0,0,1133,1131,
1,0,0,0,1134,1111,1,0,0,0,1134,1135,1,0,0,0,1135,1139,1,0,0,0,1136,1138,
7,0,0,0,1137,1136,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,
1,0,0,0,1140,1142,1,0,0,0,1141,1139,1,0,0,0,1142,1144,5,49,0,0,1143,999,
1,0,0,0,1143,1035,1,0,0,0,1143,1071,1,0,0,0,1143,1107,1,0,0,0,1144,65,1,
0,0,0,1145,1146,5,27,0,0,1146,1147,5,12,0,0,1147,1149,5,56,0,0,1148,1150,
3,56,28,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,67,1,0,0,0,1151,1157,
3,82,41,0,1152,1157,3,80,40,0,1153,1157,5,52,0,0,1154,1157,3,94,47,0,1155,
1157,3,64,32,0,1156,1151,1,0,0,0,1156,1152,1,0,0,0,1156,1153,1,0,0,0,1156,
1154,1,0,0,0,1156,1155,1,0,0,0,1157,69,1,0,0,0,1158,1161,3,72,36,0,1159,
1161,3,74,37,0,1160,1158,1,0,0,0,1160,1159,1,0,0,0,1161,71,1,0,0,0,1162,
1166,5,46,0,0,1163,1165,5,12,0,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,
1164,1,0,0,0,1166,1167,1,0,0,0,1167,1171,1,0,0,0,1168,1166,1,0,0,0,1169,
1172,3,28,14,0,1170,1172,5,42,0,0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,
1192,1,0,0,0,1173,1175,5,12,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,
1174,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,1,0,0,0,1179,
1183,5,2,0,0,1180,1182,5,12,0,0,1181,1180,1,0,0,0,1182,1185,1,0,0,0,1183,
1181,1,0,0,0,1183,1184,1,0,0,0,1184,1188,1,0,0,0,1185,1183,1,0,0,0,1186,
1189,3,28,14,0,1187,1189,5,42,0,0,1188,1186,1,0,0,0,1188,1187,1,0,0,0,1189,
1191,1,0,0,0,1190,1176,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1192,
1193,1,0,0,0,1193,1198,1,0,0,0,1194,1192,1,0,0,0,1195,1197,5,12,0,0,1196,
1195,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,
1201,1,0,0,0,1200,1198,1,0,0,0,1201,1243,5,47,0,0,1202,1206,5,48,0,0,1203,
1205,5,12,0,0,1204,1203,1,0,0,0,1205,1208,1,0,0,0,1206,1204,1,0,0,0,1206,
1207,1,0,0,0,1207,1211,1,0,0,0,1208,1206,1,0,0,0,1209,1212,3,28,14,0,1210,
1212,5,42,0,0,1211,1209,1,0,0,0,1211,1210,1,0,0,0,1212,1232,1,0,0,0,1213,
1215,5,12,0,0,1214,1213,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,
1217,1,0,0,0,1217,1219,1,0,0,0,1218,1216,1,0,0,0,1219,1223,5,2,0,0,1220,
1222,5,12,0,0,1221,1220,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1223,
1224,1,0,0,0,1224,1228,1,0,0,0,1225,1223,1,0,0,0,1226,1229,3,28,14,0,1227,
1229,5,42,0,0,1228,1226,1,0,0,0,1228,1227,1,0,0,0,1229,1231,1,0,0,0,1230,
1216,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,
1238,1,0,0,0,1234,1232,1,0,0,0,1235,1237,5,12,0,0,1236,1235,1,0,0,0,1237,
1240,1,0,0,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,
1238,1,0,0,0,1241,1243,5,49,0,0,1242,1162,1,0,0,0,1242,1202,1,0,0,0,1243,
73,1,0,0,0,1244,1245,5,8,0,0,1245,1247,3,76,38,0,1246,1244,1,0,0,0,1247,
1248,1,0,0,0,1248,1246,1,0,0,0,1248,1249,1,0,0,0,1249,75,1,0,0,0,1250,1251,
7,6,0,0,1251,77,1,0,0,0,1252,1256,3,76,38,0,1253,1255,7,0,0,0,1254,1253,
1,0,0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1259,
1,0,0,0,1258,1256,1,0,0,0,1259,1263,5,5,0,0,1260,1262,7,0,0,0,1261,1260,
1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,1266,
1,0,0,0,1265,1263,1,0,0,0,1266,1267,3,28,14,0,1267,79,1,0,0,0,1268,1269,
7,7,0,0,1269,81,1,0,0,0,1270,1271,5,41,0,0,1271,1272,3,80,40,0,1272,83,1,
0,0,0,1273,1280,3,86,43,0,1274,1275,5,12,0,0,1275,1276,5,53,0,0,1276,1277,
5,12,0,0,1277,1279,3,86,43,0,1278,1274,1,0,0,0,1279,1282,1,0,0,0,1280,1278,
1,0,0,0,1280,1281,1,0,0,0,1281,85,1,0,0,0,1282,1280,1,0,0,0,1283,1300,3,
88,44,0,1284,1286,5,12,0,0,1285,1284,1,0,0,0,1286,1289,1,0,0,0,1287,1285,
1,0,0,0,1287,1288,1,0,0,0,1288,1290,1,0,0,0,1289,1287,1,0,0,0,1290,1294,
7,8,0,0,1291,1293,5,12,0,0,1292,1291,1,0,0,0,1293,1296,1,0,0,0,1294,1292,
1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1294,1,0,0,0,1297,1299,
3,88,44,0,1298,1287,1,0,0,0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,1300,1301,
1,0,0,0,1301,87,1,0,0,0,1302,1300,1,0,0,0,1303,1307,5,50,0,0,1304,1306,5,
12,0,0,1305,1304,1,0,0,0,1306,1309,1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,
0,0,0,1308,1310,1,0,0,0,1309,1307,1,0,0,0,1310,1311,5,43,0,0,1311,1315,1,
0,0,0,1312,1314,5,12,0,0,1313,1312,1,0,0,0,1314,1317,1,0,0,0,1315,1313,1,
0,0,0,1315,1316,1,0,0,0,1316,1318,1,0,0,0,1317,1315,1,0,0,0,1318,1321,3,
90,45,0,1319,1320,5,12,0,0,1320,1322,5,55,0,0,1321,1319,1,0,0,0,1321,1322,
1,0,0,0,1322,1325,1,0,0,0,1323,1324,5,12,0,0,1324,1326,5,54,0,0,1325,1323,
1,0,0,0,1325,1326,1,0,0,0,1326,1337,1,0,0,0,1327,1330,3,90,45,0,1328,1329,
5,12,0,0,1329,1331,5,55,0,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,1334,
1,0,0,0,1332,1333,5,12,0,0,1333,1335,5,54,0,0,1334,1332,1,0,0,0,1334,1335,
1,0,0,0,1335,1337,1,0,0,0,1336,1303,1,0,0,0,1336,1327,1,0,0,0,1337,89,1,
0,0,0,1338,1364,3,92,46,0,1339,1341,5,12,0,0,1340,1339,1,0,0,0,1341,1344,
1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1342,
1,0,0,0,1345,1353,5,45,0,0,1346,1348,5,12,0,0,1347,1346,1,0,0,0,1348,1351,
1,0,0,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1352,1,0,0,0,1351,1349,
1,0,0,0,1352,1354,5,41,0,0,1353,1349,1,0,0,0,1353,1354,1,0,0,0,1354,1358,
1,0,0,0,1355,1357,5,12,0,0,1356,1355,1,0,0,0,1357,1360,1,0,0,0,1358,1356,
1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,1358,1,0,0,0,1361,1363,
7,7,0,0,1362,1342,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,
1,0,0,0,1365,91,1,0,0,0,1366,1364,1,0,0,0,1367,1372,5,56,0,0,1368,1369,5,
12,0,0,1369,1371,5,56,0,0,1370,1368,1,0,0,0,1371,1374,1,0,0,0,1372,1370,
1,0,0,0,1372,1373,1,0,0,0,1373,1392,1,0,0,0,1374,1372,1,0,0,0,1375,1379,
5,1,0,0,1376,1378,5,12,0,0,1377,1376,1,0,0,0,1378,1381,1,0,0,0,1379,1377,
1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,1381,1379,1,0,0,0,1382,1386,
3,84,42,0,1383,1385,5,12,0,0,1384,1383,1,0,0,0,1385,1388,1,0,0,0,1386,1384,
1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,1388,1386,1,0,0,0,1389,1390,
5,3,0,0,1390,1392,1,0,0,0,1391,1367,1,0,0,0,1391,1375,1,0,0,0,1392,93,1,
0,0,0,1393,1394,5,61,0,0,1394,95,1,0,0,0,206,99,106,111,117,120,134,140,
148,155,160,166,169,175,195,202,209,216,223,227,231,246,252,263,270,274,
278,287,294,298,302,306,313,315,328,335,342,349,356,363,369,372,377,384,
391,398,404,407,412,418,428,436,451,458,465,472,479,486,492,495,500,507,
514,521,527,530,535,541,550,554,560,567,574,581,588,595,601,604,610,617,
624,630,633,638,645,652,658,663,670,675,679,685,692,696,700,706,713,719,
726,733,739,746,753,759,766,773,779,786,793,799,806,813,819,826,833,839,
845,849,855,860,866,873,879,886,891,897,902,909,911,918,925,932,938,941,
946,955,962,968,979,985,994,1003,1010,1017,1023,1026,1031,1039,1046,1053,
1059,1062,1067,1075,1082,1089,1095,1098,1103,1111,1118,1125,1131,1134,1139,
1143,1149,1156,1160,1166,1171,1176,1183,1188,1192,1198,1206,1211,1216,1223,
1228,1232,1238,1242,1248,1256,1263,1280,1287,1294,1300,1307,1315,1321,1325,
1330,1334,1336,1342,1349,1353,1358,1364,1372,1379,1386,1391];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class FormulaParser extends antlr4.Parser {

    static grammarFileName = "Formula.g";
    static literalNames = [ null, "'('", "','", "')'", "'<-'", "':'", "'!'", 
                            "'not'", "'.'", null, null, null, null, null, 
                            "'while'", "'for'", "'from'", "'in'", "'to'", 
                            "'by'", "'loop'", "'if'", "'then'", "'else'", 
                            "'function'", "'end'", "'return'", "'new'", 
                            "'try'", "'catch'", "'throw'", null, "'xor'", 
                            null, null, null, "'<'", "'<='", "'>'", "'>='", 
                            "'+'", "'-'", "'*'", "'/'", null, "'^'", null, 
                            null, "'{'", "'}'", null, null, null, "'per'", 
                            "'squared'", "'cubed'", null, null, "'['", "']'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, "COMMENT", "LINE_COMMENT", "R__", "R_", 
                             "NEWLINES", "WHILESTATEMENT", "FORSTATEMENT", 
                             "FROMSTATEMENT", "INSTATEMENT", "TOSTATEMENT", 
                             "BYSTATEMENT", "LOOPSTATEMENT", "IFSTATEMENT", 
                             "THENSTATEMENT", "ELSESTATEMENT", "FUNCTIONSTATEMENT", 
                             "ENDBLOCK", "RETURNSTATEMENT", "NEWSTATEMENT", 
                             "TRYSTATEMENT", "CATCHSTATEMENT", "THROWSTATEMENT", 
                             "OR", "XOR", "AND", "EQUALS", "NOTEQUALS", 
                             "LT", "LTEQ", "GT", "GTEQ", "PLUS", "MINUS", 
                             "MULT", "DIV", "MOD", "POW", "LARR", "RARR", 
                             "LCURL", "RCURL", "INTEGER", "FLOAT", "BOOL", 
                             "PER", "SQUARED", "CUBED", "IDENT", "PRIMITIVE", 
                             "LBRACKET", "RBRACKET", "SPACE", "STRING" ];
    static ruleNames = [ "lines", "expression", "returnExp", "innerBlock", 
                         "whileLoop", "forLoop", "forInLoop", "ifThenElse", 
                         "functionDef", "tryCatch", "throwExp", "anonFunctionDef", 
                         "assignment", "assigned", "logicalExpression", 
                         "booleanXORExpression", "booleanAndExpression", 
                         "equalityExpression", "relationalExpression", "additiveExpression", 
                         "multiplicativeExpression", "arrayExpression", 
                         "negationExpression", "powerExpression", "unaryOrNegate", 
                         "unaryExpression", "innerPrimaryExpression", "selectionExpression", 
                         "funCall", "primaryExpression", "value", "material", 
                         "array", "newObject", "defaultValue", "selector", 
                         "minarray", "dotselector", "arrayName", "label", 
                         "number", "negnumber", "unitMultiplicativeExpression", 
                         "unitInnerMultiplicativeExpression", "unitClump", 
                         "unitPowerExpression", "unit", "string" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = FormulaParser.ruleNames;
        this.literalNames = FormulaParser.literalNames;
        this.symbolicNames = FormulaParser.symbolicNames;
    }



	lines() {
	    let localctx = new LinesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, FormulaParser.RULE_lines);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 99;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11 || _la===12) {
	            this.state = 96;
	            _la = this._input.LA(1);
	            if(!(_la===11 || _la===12)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 101;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 120;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1562427586) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 1150625) !== 0)) {
	            this.state = 102;
	            this.expression();
	            this.state = 111;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 104; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 103;
	                        this.match(FormulaParser.R__);
	                        this.state = 106; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===11);
	                    this.state = 108;
	                    this.expression(); 
	                }
	                this.state = 113;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	            }

	            this.state = 117;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 114;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 119;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 122;
	        this.match(FormulaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, FormulaParser.RULE_expression);
	    try {
	        this.state = 134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 124;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 125;
	            this.logicalExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 126;
	            this.whileLoop();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 127;
	            this.forLoop();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 128;
	            this.forInLoop();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 129;
	            this.ifThenElse();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 130;
	            this.functionDef();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 131;
	            this.returnExp();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 132;
	            this.tryCatch();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 133;
	            this.throwExp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnExp() {
	    let localctx = new ReturnExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, FormulaParser.RULE_returnExp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 136;
	        this.match(FormulaParser.RETURNSTATEMENT);

	        this.state = 140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 137;
	            this.match(FormulaParser.R_);
	            this.state = 142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 143;
	        this.logicalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerBlock() {
	    let localctx = new InnerBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, FormulaParser.RULE_innerBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 148;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 145;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 150;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	        this.state = 169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1562427586) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 1150625) !== 0)) {
	            this.state = 151;
	            this.expression();
	            this.state = 160;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 153; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 152;
	                        this.match(FormulaParser.R__);
	                        this.state = 155; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===11);
	                    this.state = 157;
	                    this.expression(); 
	                }
	                this.state = 162;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	            }

	            this.state = 166;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 163;
	                    _la = this._input.LA(1);
	                    if(!(_la===11 || _la===12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 168;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileLoop() {
	    let localctx = new WhileLoopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, FormulaParser.RULE_whileLoop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 171;
	        this.match(FormulaParser.WHILESTATEMENT);

	        this.state = 175;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 172;
	            this.match(FormulaParser.R_);
	            this.state = 177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 178;
	        this.logicalExpression();

	        this.state = 179;
	        this.match(FormulaParser.R__);
	        this.state = 180;
	        this.innerBlock();
	        this.state = 182;
	        this.match(FormulaParser.R__);
	        this.state = 183;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 184;
	        this.match(FormulaParser.R_);
	        this.state = 185;
	        this.match(FormulaParser.LOOPSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forLoop() {
	    let localctx = new ForLoopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, FormulaParser.RULE_forLoop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 187;
	        this.match(FormulaParser.FORSTATEMENT);
	        this.state = 188;
	        this.match(FormulaParser.R_);
	        this.state = 189;
	        this.match(FormulaParser.IDENT);
	        this.state = 190;
	        this.match(FormulaParser.R_);
	        this.state = 191;
	        this.match(FormulaParser.FROMSTATEMENT);

	        this.state = 195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 192;
	            this.match(FormulaParser.R_);
	            this.state = 197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 198;
	        this.logicalExpression();

	        this.state = 202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 199;
	            this.match(FormulaParser.R_);
	            this.state = 204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 205;
	        this.match(FormulaParser.TOSTATEMENT);

	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 206;
	            this.match(FormulaParser.R_);
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this.logicalExpression();
	        this.state = 227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===19) {
	            this.state = 216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 213;
	                this.match(FormulaParser.R_);
	                this.state = 218;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 219;
	            this.match(FormulaParser.BYSTATEMENT);

	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 220;
	                this.match(FormulaParser.R_);
	                this.state = 225;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 226;
	            this.logicalExpression();
	        }

	        this.state = 231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 229;
	            this.match(FormulaParser.R__);
	            this.state = 230;
	            this.innerBlock();

	        }
	        this.state = 233;
	        this.match(FormulaParser.R__);
	        this.state = 234;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 235;
	        this.match(FormulaParser.R_);
	        this.state = 236;
	        this.match(FormulaParser.LOOPSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInLoop() {
	    let localctx = new ForInLoopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, FormulaParser.RULE_forInLoop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 238;
	        this.match(FormulaParser.FORSTATEMENT);
	        this.state = 239;
	        this.match(FormulaParser.R_);
	        this.state = 240;
	        this.match(FormulaParser.IDENT);
	        this.state = 241;
	        this.match(FormulaParser.R_);
	        this.state = 242;
	        this.match(FormulaParser.INSTATEMENT);

	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 243;
	            this.match(FormulaParser.R_);
	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 249;
	        this.logicalExpression();
	        this.state = 252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 250;
	            this.match(FormulaParser.R__);
	            this.state = 251;
	            this.innerBlock();

	        }
	        this.state = 254;
	        this.match(FormulaParser.R__);
	        this.state = 255;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 256;
	        this.match(FormulaParser.R_);
	        this.state = 257;
	        this.match(FormulaParser.LOOPSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElse() {
	    let localctx = new IfThenElseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, FormulaParser.RULE_ifThenElse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(FormulaParser.IFSTATEMENT);

	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 260;
	            this.match(FormulaParser.R_);
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 266;
	        this.logicalExpression();

	        this.state = 270;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 267;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 272;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22) {
	            this.state = 273;
	            this.match(FormulaParser.THENSTATEMENT);
	        }

	        this.state = 278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 276;
	            this.match(FormulaParser.R__);
	            this.state = 277;
	            this.innerBlock();

	        }
	        this.state = 306;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 280;
	                this.match(FormulaParser.R__);
	                this.state = 281;
	                this.match(FormulaParser.ELSESTATEMENT);
	                this.state = 282;
	                this.match(FormulaParser.R_);
	                this.state = 283;
	                this.match(FormulaParser.IFSTATEMENT);

	                this.state = 287;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 284;
	                    this.match(FormulaParser.R_);
	                    this.state = 289;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 290;
	                this.logicalExpression();

	                this.state = 294;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 291;
	                        _la = this._input.LA(1);
	                        if(!(_la===11 || _la===12)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        } 
	                    }
	                    this.state = 296;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	                }

	                this.state = 298;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===22) {
	                    this.state = 297;
	                    this.match(FormulaParser.THENSTATEMENT);
	                }

	                this.state = 302;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	                if(la_===1) {
	                    this.state = 300;
	                    this.match(FormulaParser.R__);
	                    this.state = 301;
	                    this.innerBlock();

	                } 
	            }
	            this.state = 308;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	        }

	        this.state = 315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 309;
	            this.match(FormulaParser.R__);
	            this.state = 310;
	            this.match(FormulaParser.ELSESTATEMENT);
	            this.state = 313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 311;
	                this.match(FormulaParser.R__);
	                this.state = 312;
	                this.innerBlock();

	            }

	        }
	        this.state = 317;
	        this.match(FormulaParser.R__);
	        this.state = 318;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 319;
	        this.match(FormulaParser.R_);
	        this.state = 320;
	        this.match(FormulaParser.IFSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDef() {
	    let localctx = new FunctionDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, FormulaParser.RULE_functionDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.match(FormulaParser.FUNCTIONSTATEMENT);
	        this.state = 323;
	        this.match(FormulaParser.R_);
	        this.state = 324;
	        this.match(FormulaParser.IDENT);

	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 325;
	            this.match(FormulaParser.R_);
	            this.state = 330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 331;
	        this.match(FormulaParser.T__0);
	        this.state = 407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 332;
	                this.match(FormulaParser.R_);
	                this.state = 337;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 338;
	            this.match(FormulaParser.IDENT);
	            this.state = 372;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 339;
	                    this.match(FormulaParser.R_);
	                    this.state = 344;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 345;
	                this.match(FormulaParser.EQUALS);

	                this.state = 349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 346;
	                    this.match(FormulaParser.R_);
	                    this.state = 351;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 352;
	                this.defaultValue();
	                break;

	            case 2:
	                this.state = 369;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 356;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===12) {
	                            this.state = 353;
	                            this.match(FormulaParser.R_);
	                            this.state = 358;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 359;
	                        this.match(FormulaParser.T__1);

	                        this.state = 363;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===12) {
	                            this.state = 360;
	                            this.match(FormulaParser.R_);
	                            this.state = 365;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 366;
	                        this.match(FormulaParser.IDENT); 
	                    }
	                    this.state = 371;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	                }

	                break;

	            }
	            this.state = 404;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 377;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 374;
	                        this.match(FormulaParser.R_);
	                        this.state = 379;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 380;
	                    this.match(FormulaParser.T__1);

	                    this.state = 384;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 381;
	                        this.match(FormulaParser.R_);
	                        this.state = 386;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 387;
	                    this.match(FormulaParser.IDENT);

	                    this.state = 391;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 388;
	                        this.match(FormulaParser.R_);
	                        this.state = 393;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 394;
	                    this.match(FormulaParser.EQUALS);

	                    this.state = 398;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 395;
	                        this.match(FormulaParser.R_);
	                        this.state = 400;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 401;
	                    this.defaultValue(); 
	                }
	                this.state = 406;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	            }


	        }

	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 409;
	            this.match(FormulaParser.R_);
	            this.state = 414;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 415;
	        this.match(FormulaParser.T__2);
	        this.state = 418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 416;
	            this.match(FormulaParser.R__);
	            this.state = 417;
	            this.innerBlock();

	        }
	        this.state = 420;
	        this.match(FormulaParser.R__);
	        this.state = 421;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 422;
	        this.match(FormulaParser.R_);
	        this.state = 423;
	        this.match(FormulaParser.FUNCTIONSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryCatch() {
	    let localctx = new TryCatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, FormulaParser.RULE_tryCatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(FormulaParser.TRYSTATEMENT);
	        this.state = 428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 426;
	            this.match(FormulaParser.R__);
	            this.state = 427;
	            this.innerBlock();

	        }
	        this.state = 430;
	        this.match(FormulaParser.R__);
	        this.state = 431;
	        this.match(FormulaParser.CATCHSTATEMENT);
	        this.state = 432;
	        this.match(FormulaParser.R_);
	        this.state = 433;
	        this.match(FormulaParser.IDENT);
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 434;
	            this.match(FormulaParser.R__);
	            this.state = 435;
	            this.innerBlock();

	        }
	        this.state = 438;
	        this.match(FormulaParser.R__);
	        this.state = 439;
	        this.match(FormulaParser.ENDBLOCK);
	        this.state = 440;
	        this.match(FormulaParser.R_);
	        this.state = 441;
	        this.match(FormulaParser.TRYSTATEMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExp() {
	    let localctx = new ThrowExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, FormulaParser.RULE_throwExp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(FormulaParser.THROWSTATEMENT);
	        this.state = 444;
	        this.match(FormulaParser.R_);
	        this.state = 445;
	        this.primaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonFunctionDef() {
	    let localctx = new AnonFunctionDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, FormulaParser.RULE_anonFunctionDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(FormulaParser.FUNCTIONSTATEMENT);

	        this.state = 451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 448;
	            this.match(FormulaParser.R_);
	            this.state = 453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 454;
	        this.match(FormulaParser.T__0);
	        this.state = 530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 455;
	                this.match(FormulaParser.R_);
	                this.state = 460;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 461;
	            this.match(FormulaParser.IDENT);
	            this.state = 495;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 465;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 462;
	                    this.match(FormulaParser.R_);
	                    this.state = 467;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 468;
	                this.match(FormulaParser.EQUALS);

	                this.state = 472;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 469;
	                    this.match(FormulaParser.R_);
	                    this.state = 474;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 475;
	                this.defaultValue();
	                break;

	            case 2:
	                this.state = 492;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 479;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===12) {
	                            this.state = 476;
	                            this.match(FormulaParser.R_);
	                            this.state = 481;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 482;
	                        this.match(FormulaParser.T__1);

	                        this.state = 486;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===12) {
	                            this.state = 483;
	                            this.match(FormulaParser.R_);
	                            this.state = 488;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 489;
	                        this.match(FormulaParser.IDENT); 
	                    }
	                    this.state = 494;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	                }

	                break;

	            }
	            this.state = 527;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 500;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 497;
	                        this.match(FormulaParser.R_);
	                        this.state = 502;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 503;
	                    this.match(FormulaParser.T__1);

	                    this.state = 507;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 504;
	                        this.match(FormulaParser.R_);
	                        this.state = 509;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 510;
	                    this.match(FormulaParser.IDENT);

	                    this.state = 514;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 511;
	                        this.match(FormulaParser.R_);
	                        this.state = 516;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 517;
	                    this.match(FormulaParser.EQUALS);

	                    this.state = 521;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 518;
	                        this.match(FormulaParser.R_);
	                        this.state = 523;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 524;
	                    this.defaultValue(); 
	                }
	                this.state = 529;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }


	        }

	        this.state = 535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 532;
	            this.match(FormulaParser.R_);
	            this.state = 537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 538;
	        this.match(FormulaParser.T__2);
	        this.state = 554;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	            this.state = 541;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            if(la_===1) {
	                this.state = 539;
	                this.match(FormulaParser.R__);
	                this.state = 540;
	                this.innerBlock();

	            }
	            this.state = 543;
	            this.match(FormulaParser.R__);
	            this.state = 544;
	            this.match(FormulaParser.ENDBLOCK);
	            this.state = 545;
	            this.match(FormulaParser.R_);
	            this.state = 546;
	            this.match(FormulaParser.FUNCTIONSTATEMENT);
	            break;
	        case 1:
	        case 6:
	        case 7:
	        case 12:
	        case 14:
	        case 15:
	        case 21:
	        case 24:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 41:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 61:
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 547;
	                this.match(FormulaParser.R_);
	                this.state = 552;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 553;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, FormulaParser.RULE_assignment);
	    var _la = 0;
	    try {
	        this.state = 696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 556;
	            this.match(FormulaParser.IDENT);

	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 557;
	                this.match(FormulaParser.R_);
	                this.state = 562;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 563;
	            this.match(FormulaParser.T__0);
	            this.state = 633;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            if(la_===1) {
	                this.state = 567;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 564;
	                    this.match(FormulaParser.R_);
	                    this.state = 569;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 570;
	                this.match(FormulaParser.IDENT);
	                this.state = 604;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 574;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 571;
	                        this.match(FormulaParser.R_);
	                        this.state = 576;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 577;
	                    this.match(FormulaParser.EQUALS);

	                    this.state = 581;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 578;
	                        this.match(FormulaParser.R_);
	                        this.state = 583;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 584;
	                    this.defaultValue();
	                    break;

	                case 2:
	                    this.state = 601;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 588;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===12) {
	                                this.state = 585;
	                                this.match(FormulaParser.R_);
	                                this.state = 590;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }
	                            this.state = 591;
	                            this.match(FormulaParser.T__1);

	                            this.state = 595;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===12) {
	                                this.state = 592;
	                                this.match(FormulaParser.R_);
	                                this.state = 597;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }
	                            this.state = 598;
	                            this.match(FormulaParser.IDENT); 
	                        }
	                        this.state = 603;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	                    }

	                    break;

	                }
	                this.state = 630;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===2) {
	                    this.state = 606;
	                    this.match(FormulaParser.T__1);

	                    this.state = 610;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 607;
	                        this.match(FormulaParser.R_);
	                        this.state = 612;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 613;
	                    this.match(FormulaParser.IDENT);

	                    this.state = 617;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 614;
	                        this.match(FormulaParser.R_);
	                        this.state = 619;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 620;
	                    this.match(FormulaParser.EQUALS);

	                    this.state = 624;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 621;
	                        this.match(FormulaParser.R_);
	                        this.state = 626;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 627;
	                    this.defaultValue();
	                    this.state = 632;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }

	            this.state = 638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 635;
	                this.match(FormulaParser.R_);
	                this.state = 640;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 641;
	            this.match(FormulaParser.T__2);

	            this.state = 645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 642;
	                this.match(FormulaParser.R_);
	                this.state = 647;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 648;
	            this.match(FormulaParser.T__3);

	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 649;
	                this.match(FormulaParser.R_);
	                this.state = 654;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 655;
	            this.logicalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 57:
	                this.state = 656;
	                this.match(FormulaParser.PRIMITIVE);
	                break;
	            case 56:
	                this.state = 657;
	                this.assigned();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 679;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 663;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 660;
	                        this.match(FormulaParser.R_);
	                        this.state = 665;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 666;
	                    this.match(FormulaParser.T__1);

	                    this.state = 670;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 667;
	                        this.match(FormulaParser.R_);
	                        this.state = 672;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 675;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 57:
	                        this.state = 673;
	                        this.match(FormulaParser.PRIMITIVE);
	                        break;
	                    case 56:
	                        this.state = 674;
	                        this.assigned();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 681;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	            }

	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 682;
	                this.match(FormulaParser.R_);
	                this.state = 687;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 688;
	            this.match(FormulaParser.T__3);

	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 689;
	                this.match(FormulaParser.R_);
	                this.state = 694;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 695;
	            this.logicalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assigned() {
	    let localctx = new AssignedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, FormulaParser.RULE_assigned);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.match(FormulaParser.IDENT);
	        this.state = 700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===46 || _la===48) {
	            this.state = 699;
	            this.selector();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalExpression() {
	    let localctx = new LogicalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, FormulaParser.RULE_logicalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this.booleanXORExpression();
	        this.state = 719;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 706;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 703;
	                    this.match(FormulaParser.R_);
	                    this.state = 708;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 709;
	                this.match(FormulaParser.OR);

	                this.state = 713;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 710;
	                    this.match(FormulaParser.R_);
	                    this.state = 715;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 716;
	                this.booleanXORExpression(); 
	            }
	            this.state = 721;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanXORExpression() {
	    let localctx = new BooleanXORExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, FormulaParser.RULE_booleanXORExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.booleanAndExpression();
	        this.state = 739;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 726;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 723;
	                    this.match(FormulaParser.R_);
	                    this.state = 728;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 729;
	                this.match(FormulaParser.XOR);

	                this.state = 733;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 730;
	                    this.match(FormulaParser.R_);
	                    this.state = 735;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 736;
	                this.booleanAndExpression(); 
	            }
	            this.state = 741;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanAndExpression() {
	    let localctx = new BooleanAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, FormulaParser.RULE_booleanAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.equalityExpression();
	        this.state = 759;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 746;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 743;
	                    this.match(FormulaParser.R_);
	                    this.state = 748;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 749;
	                this.match(FormulaParser.AND);

	                this.state = 753;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 750;
	                    this.match(FormulaParser.R_);
	                    this.state = 755;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 756;
	                this.equalityExpression(); 
	            }
	            this.state = 761;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, FormulaParser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.relationalExpression();
	        this.state = 779;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 766;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 763;
	                    this.match(FormulaParser.R_);
	                    this.state = 768;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 769;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===35)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	                this.state = 773;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 770;
	                    this.match(FormulaParser.R_);
	                    this.state = 775;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 776;
	                this.relationalExpression(); 
	            }
	            this.state = 781;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, FormulaParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.additiveExpression();
	        this.state = 799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 786;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 783;
	                    this.match(FormulaParser.R_);
	                    this.state = 788;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 789;
	                _la = this._input.LA(1);
	                if(!(((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 15) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	                this.state = 793;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 790;
	                    this.match(FormulaParser.R_);
	                    this.state = 795;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 796;
	                this.additiveExpression(); 
	            }
	            this.state = 801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, FormulaParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this.multiplicativeExpression();
	        this.state = 819;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 806;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 803;
	                    this.match(FormulaParser.R_);
	                    this.state = 808;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 809;
	                _la = this._input.LA(1);
	                if(!(_la===40 || _la===41)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	                this.state = 813;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 810;
	                    this.match(FormulaParser.R_);
	                    this.state = 815;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 816;
	                this.multiplicativeExpression(); 
	            }
	            this.state = 821;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, FormulaParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.arrayExpression();
	        this.state = 839;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 826;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 823;
	                    this.match(FormulaParser.R_);
	                    this.state = 828;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 829;
	                _la = this._input.LA(1);
	                if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 7) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	                this.state = 833;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 830;
	                    this.match(FormulaParser.R_);
	                    this.state = 835;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 836;
	                this.arrayExpression(); 
	            }
	            this.state = 841;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayExpression() {
	    let localctx = new ArrayExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, FormulaParser.RULE_arrayExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.negationExpression();
	        this.state = 845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 843;
	            this.match(FormulaParser.T__4);
	            this.state = 844;
	            this.negationExpression();

	        }
	        this.state = 849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 847;
	            this.match(FormulaParser.T__4);
	            this.state = 848;
	            this.negationExpression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negationExpression() {
	    let localctx = new NegationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, FormulaParser.RULE_negationExpression);
	    var _la = 0;
	    try {
	        this.state = 860;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 851;
	            this.match(FormulaParser.MINUS);

	            this.state = 855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 852;
	                this.match(FormulaParser.R_);
	                this.state = 857;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 858;
	            this.powerExpression();
	            break;
	        case 1:
	        case 6:
	        case 7:
	        case 24:
	        case 27:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 859;
	            this.powerExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerExpression() {
	    let localctx = new PowerExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, FormulaParser.RULE_powerExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.unaryExpression();
	        this.state = 879;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 866;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 863;
	                    this.match(FormulaParser.R_);
	                    this.state = 868;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 869;
	                this.match(FormulaParser.POW);

	                this.state = 873;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 870;
	                    this.match(FormulaParser.R_);
	                    this.state = 875;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 876;
	                this.unaryOrNegate(); 
	            }
	            this.state = 881;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOrNegate() {
	    let localctx = new UnaryOrNegateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, FormulaParser.RULE_unaryOrNegate);
	    var _la = 0;
	    try {
	        this.state = 891;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 882;
	            this.match(FormulaParser.MINUS);

	            this.state = 886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 883;
	                this.match(FormulaParser.R_);
	                this.state = 888;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 889;
	            this.unaryExpression();
	            break;
	        case 1:
	        case 6:
	        case 7:
	        case 24:
	        case 27:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 890;
	            this.unaryExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, FormulaParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            _la = this._input.LA(1);
	            if(!(_la===6 || _la===7)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 894;
	                this.match(FormulaParser.R_);
	                this.state = 899;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 900;
	            this.innerPrimaryExpression();
	            break;
	        case 1:
	        case 24:
	        case 27:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 901;
	            this.innerPrimaryExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerPrimaryExpression() {
	    let localctx = new InnerPrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, FormulaParser.RULE_innerPrimaryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.selectionExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionExpression() {
	    let localctx = new SelectionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, FormulaParser.RULE_selectionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this.primaryExpression();
	        this.state = 911;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 909;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 8:
	                case 46:
	                case 48:
	                    this.state = 907;
	                    this.selector();
	                    break;
	                case 1:
	                    this.state = 908;
	                    this.funCall();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 913;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funCall() {
	    let localctx = new FunCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, FormulaParser.RULE_funCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.match(FormulaParser.T__0);
	        this.state = 941;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        if(la_===1) {
	            this.state = 918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 915;
	                this.match(FormulaParser.R_);
	                this.state = 920;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 921;
	            this.logicalExpression();
	            this.state = 938;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 925;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 922;
	                        this.match(FormulaParser.R_);
	                        this.state = 927;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 928;
	                    this.match(FormulaParser.T__1);

	                    this.state = 932;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 929;
	                        this.match(FormulaParser.R_);
	                        this.state = 934;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 935;
	                    this.logicalExpression(); 
	                }
	                this.state = 940;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
	            }


	        }

	        this.state = 946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 943;
	            this.match(FormulaParser.R_);
	            this.state = 948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 949;
	        this.match(FormulaParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, FormulaParser.RULE_primaryExpression);
	    var _la = 0;
	    try {
	        this.state = 968;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 951;
	            this.match(FormulaParser.T__0);

	            this.state = 955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 952;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 957;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 958;
	            this.logicalExpression();

	            this.state = 962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 959;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 964;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 965;
	            this.match(FormulaParser.T__2);
	            break;
	        case 24:
	        case 27:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 56:
	        case 57:
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 967;
	            this.value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, FormulaParser.RULE_value);
	    try {
	        this.state = 979;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 970;
	            this.number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 971;
	            this.match(FormulaParser.BOOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 972;
	            this.string();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 973;
	            this.material();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 974;
	            this.match(FormulaParser.IDENT);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 975;
	            this.match(FormulaParser.PRIMITIVE);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 976;
	            this.array();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 977;
	            this.anonFunctionDef();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 978;
	            this.newObject();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	material() {
	    let localctx = new MaterialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, FormulaParser.RULE_material);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        this.match(FormulaParser.LCURL);

	        this.state = 985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 982;
	            this.match(FormulaParser.R_);
	            this.state = 987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 988;
	        this.additiveExpression();
	        this.state = 989;
	        this.match(FormulaParser.R_);
	        this.state = 990;
	        this.unitMultiplicativeExpression();

	        this.state = 994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 991;
	            this.match(FormulaParser.R_);
	            this.state = 996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 997;
	        this.match(FormulaParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array() {
	    let localctx = new ArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, FormulaParser.RULE_array);
	    var _la = 0;
	    try {
	        this.state = 1143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 999;
	            this.match(FormulaParser.LARR);
	            this.state = 1026;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	            if(la_===1) {
	                this.state = 1003;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===11 || _la===12) {
	                    this.state = 1000;
	                    _la = this._input.LA(1);
	                    if(!(_la===11 || _la===12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1005;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1006;
	                this.label();
	                this.state = 1023;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1010;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1007;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1012;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1013;
	                        this.match(FormulaParser.T__1);

	                        this.state = 1017;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1014;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1019;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1020;
	                        this.label(); 
	                    }
	                    this.state = 1025;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
	                }


	            }

	            this.state = 1031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 1028;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1033;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1034;
	            this.match(FormulaParser.RARR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1035;
	            this.match(FormulaParser.LCURL);
	            this.state = 1062;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	            if(la_===1) {
	                this.state = 1039;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===11 || _la===12) {
	                    this.state = 1036;
	                    _la = this._input.LA(1);
	                    if(!(_la===11 || _la===12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1041;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1042;
	                this.label();
	                this.state = 1059;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1046;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1043;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1048;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1049;
	                        this.match(FormulaParser.T__1);

	                        this.state = 1053;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1050;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1055;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1056;
	                        this.label(); 
	                    }
	                    this.state = 1061;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	                }


	            }

	            this.state = 1067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 1064;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1069;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1070;
	            this.match(FormulaParser.RCURL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1071;
	            this.match(FormulaParser.LARR);
	            this.state = 1098;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	            if(la_===1) {
	                this.state = 1075;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===11 || _la===12) {
	                    this.state = 1072;
	                    _la = this._input.LA(1);
	                    if(!(_la===11 || _la===12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1077;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1078;
	                this.logicalExpression();
	                this.state = 1095;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1082;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1079;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1084;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1085;
	                        this.match(FormulaParser.T__1);

	                        this.state = 1089;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1086;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1091;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1092;
	                        this.logicalExpression(); 
	                    }
	                    this.state = 1097;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
	                }


	            }

	            this.state = 1103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 1100;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1105;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1106;
	            this.match(FormulaParser.RARR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1107;
	            this.match(FormulaParser.LCURL);
	            this.state = 1134;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            if(la_===1) {
	                this.state = 1111;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===11 || _la===12) {
	                    this.state = 1108;
	                    _la = this._input.LA(1);
	                    if(!(_la===11 || _la===12)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1113;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1114;
	                this.logicalExpression();
	                this.state = 1131;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1118;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1115;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1120;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1121;
	                        this.match(FormulaParser.T__1);

	                        this.state = 1125;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===11 || _la===12) {
	                            this.state = 1122;
	                            _la = this._input.LA(1);
	                            if(!(_la===11 || _la===12)) {
	                            this._errHandler.recoverInline(this);
	                            }
	                            else {
	                            	this._errHandler.reportMatch(this);
	                                this.consume();
	                            }
	                            this.state = 1127;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1128;
	                        this.logicalExpression(); 
	                    }
	                    this.state = 1133;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	                }


	            }

	            this.state = 1139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11 || _la===12) {
	                this.state = 1136;
	                _la = this._input.LA(1);
	                if(!(_la===11 || _la===12)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1141;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1142;
	            this.match(FormulaParser.RCURL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newObject() {
	    let localctx = new NewObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, FormulaParser.RULE_newObject);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(FormulaParser.NEWSTATEMENT);
	        this.state = 1146;
	        this.match(FormulaParser.R_);
	        this.state = 1147;
	        this.match(FormulaParser.IDENT);
	        this.state = 1149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        if(la_===1) {
	            this.state = 1148;
	            this.funCall();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, FormulaParser.RULE_defaultValue);
	    try {
	        this.state = 1156;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1151;
	            this.negnumber();
	            break;
	        case 50:
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1152;
	            this.number();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1153;
	            this.match(FormulaParser.BOOL);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1154;
	            this.string();
	            break;
	        case 46:
	        case 48:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1155;
	            this.array();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector() {
	    let localctx = new SelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, FormulaParser.RULE_selector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	        case 48:
	            this.state = 1158;
	            this.minarray();
	            break;
	        case 8:
	            this.state = 1159;
	            this.dotselector();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minarray() {
	    let localctx = new MinarrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, FormulaParser.RULE_minarray);
	    var _la = 0;
	    try {
	        this.state = 1242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1162;
	            this.match(FormulaParser.LARR);

	            this.state = 1166;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1163;
	                this.match(FormulaParser.R_);
	                this.state = 1168;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1171;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 6:
	            case 7:
	            case 24:
	            case 27:
	            case 41:
	            case 46:
	            case 48:
	            case 50:
	            case 51:
	            case 52:
	            case 56:
	            case 57:
	            case 61:
	                this.state = 1169;
	                this.logicalExpression();
	                break;
	            case 42:
	                this.state = 1170;
	                this.match(FormulaParser.MULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1192;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1176;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 1173;
	                        this.match(FormulaParser.R_);
	                        this.state = 1178;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1179;
	                    this.match(FormulaParser.T__1);

	                    this.state = 1183;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 1180;
	                        this.match(FormulaParser.R_);
	                        this.state = 1185;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1188;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 1:
	                    case 6:
	                    case 7:
	                    case 24:
	                    case 27:
	                    case 41:
	                    case 46:
	                    case 48:
	                    case 50:
	                    case 51:
	                    case 52:
	                    case 56:
	                    case 57:
	                    case 61:
	                        this.state = 1186;
	                        this.logicalExpression();
	                        break;
	                    case 42:
	                        this.state = 1187;
	                        this.match(FormulaParser.MULT);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 1194;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	            }

	            this.state = 1198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1195;
	                this.match(FormulaParser.R_);
	                this.state = 1200;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1201;
	            this.match(FormulaParser.RARR);
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1202;
	            this.match(FormulaParser.LCURL);

	            this.state = 1206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1203;
	                this.match(FormulaParser.R_);
	                this.state = 1208;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1211;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 6:
	            case 7:
	            case 24:
	            case 27:
	            case 41:
	            case 46:
	            case 48:
	            case 50:
	            case 51:
	            case 52:
	            case 56:
	            case 57:
	            case 61:
	                this.state = 1209;
	                this.logicalExpression();
	                break;
	            case 42:
	                this.state = 1210;
	                this.match(FormulaParser.MULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1232;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1216;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 1213;
	                        this.match(FormulaParser.R_);
	                        this.state = 1218;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1219;
	                    this.match(FormulaParser.T__1);

	                    this.state = 1223;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 1220;
	                        this.match(FormulaParser.R_);
	                        this.state = 1225;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1228;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 1:
	                    case 6:
	                    case 7:
	                    case 24:
	                    case 27:
	                    case 41:
	                    case 46:
	                    case 48:
	                    case 50:
	                    case 51:
	                    case 52:
	                    case 56:
	                    case 57:
	                    case 61:
	                        this.state = 1226;
	                        this.logicalExpression();
	                        break;
	                    case 42:
	                        this.state = 1227;
	                        this.match(FormulaParser.MULT);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 1234;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	            }

	            this.state = 1238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1235;
	                this.match(FormulaParser.R_);
	                this.state = 1240;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1241;
	            this.match(FormulaParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotselector() {
	    let localctx = new DotselectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, FormulaParser.RULE_dotselector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1244;
	        		this.match(FormulaParser.T__7);
	        		this.state = 1245;
	        		this.arrayName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1248; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,183, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayName() {
	    let localctx = new ArrayNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, FormulaParser.RULE_arrayName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1250;
	        _la = this._input.LA(1);
	        if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 540673) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, FormulaParser.RULE_label);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.arrayName();

	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11 || _la===12) {
	            this.state = 1253;
	            _la = this._input.LA(1);
	            if(!(_la===11 || _la===12)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1259;
	        this.match(FormulaParser.T__4);

	        this.state = 1263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11 || _la===12) {
	            this.state = 1260;
	            _la = this._input.LA(1);
	            if(!(_la===11 || _la===12)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1266;
	        this.logicalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, FormulaParser.RULE_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        _la = this._input.LA(1);
	        if(!(_la===50 || _la===51)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negnumber() {
	    let localctx = new NegnumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, FormulaParser.RULE_negnumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(FormulaParser.MINUS);
	        this.state = 1271;
	        this.number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitMultiplicativeExpression() {
	    let localctx = new UnitMultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, FormulaParser.RULE_unitMultiplicativeExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1273;
	        this.unitInnerMultiplicativeExpression();
	        this.state = 1280;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1274;
	                this.match(FormulaParser.R_);
	                this.state = 1275;
	                this.match(FormulaParser.PER);
	                this.state = 1276;
	                this.match(FormulaParser.R_);
	                this.state = 1277;
	                this.unitInnerMultiplicativeExpression(); 
	            }
	            this.state = 1282;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitInnerMultiplicativeExpression() {
	    let localctx = new UnitInnerMultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, FormulaParser.RULE_unitInnerMultiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.unitClump();
	        this.state = 1300;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1287;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 1284;
	                    this.match(FormulaParser.R_);
	                    this.state = 1289;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1290;
	                _la = this._input.LA(1);
	                if(!(_la===42 || _la===43)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	                this.state = 1294;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 1291;
	                    this.match(FormulaParser.R_);
	                    this.state = 1296;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1297;
	                this.unitClump(); 
	            }
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitClump() {
	    let localctx = new UnitClumpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, FormulaParser.RULE_unitClump);
	    var _la = 0;
	    try {
	        this.state = 1336;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1303;
	            this.match(FormulaParser.INTEGER);

	            this.state = 1307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1304;
	                this.match(FormulaParser.R_);
	                this.state = 1309;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1310;
	            this.match(FormulaParser.DIV);

	            this.state = 1315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1312;
	                this.match(FormulaParser.R_);
	                this.state = 1317;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1318;
	            this.unitPowerExpression();
	            this.state = 1321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	            if(la_===1) {
	                this.state = 1319;
	                this.match(FormulaParser.R_);
	                this.state = 1320;
	                this.match(FormulaParser.CUBED);

	            }
	            this.state = 1325;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	            if(la_===1) {
	                this.state = 1323;
	                this.match(FormulaParser.R_);
	                this.state = 1324;
	                this.match(FormulaParser.SQUARED);

	            }
	            break;
	        case 1:
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1327;
	            this.unitPowerExpression();
	            this.state = 1330;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            if(la_===1) {
	                this.state = 1328;
	                this.match(FormulaParser.R_);
	                this.state = 1329;
	                this.match(FormulaParser.CUBED);

	            }
	            this.state = 1334;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	            if(la_===1) {
	                this.state = 1332;
	                this.match(FormulaParser.R_);
	                this.state = 1333;
	                this.match(FormulaParser.SQUARED);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitPowerExpression() {
	    let localctx = new UnitPowerExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, FormulaParser.RULE_unitPowerExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1338;
	        this.unit();
	        this.state = 1364;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 1339;
	                    this.match(FormulaParser.R_);
	                    this.state = 1344;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1345;
	                this.match(FormulaParser.POW);
	                this.state = 1353;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	                if(la_===1) {
	                    this.state = 1349;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===12) {
	                        this.state = 1346;
	                        this.match(FormulaParser.R_);
	                        this.state = 1351;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1352;
	                    this.match(FormulaParser.MINUS);

	                }

	                this.state = 1358;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===12) {
	                    this.state = 1355;
	                    this.match(FormulaParser.R_);
	                    this.state = 1360;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1361;
	                _la = this._input.LA(1);
	                if(!(_la===50 || _la===51)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unit() {
	    let localctx = new UnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, FormulaParser.RULE_unit);
	    var _la = 0;
	    try {
	        this.state = 1391;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1367;
	            this.match(FormulaParser.IDENT);
	            this.state = 1372;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1368;
	                    this.match(FormulaParser.R_);
	                    this.state = 1369;
	                    this.match(FormulaParser.IDENT); 
	                }
	                this.state = 1374;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
	            }

	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1375;
	            this.match(FormulaParser.T__0);

	            this.state = 1379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1376;
	                this.match(FormulaParser.R_);
	                this.state = 1381;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1382;
	            this.unitMultiplicativeExpression();

	            this.state = 1386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===12) {
	                this.state = 1383;
	                this.match(FormulaParser.R_);
	                this.state = 1388;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1389;
	            this.match(FormulaParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, FormulaParser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this.match(FormulaParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

FormulaParser.EOF = antlr4.Token.EOF;
FormulaParser.T__0 = 1;
FormulaParser.T__1 = 2;
FormulaParser.T__2 = 3;
FormulaParser.T__3 = 4;
FormulaParser.T__4 = 5;
FormulaParser.T__5 = 6;
FormulaParser.T__6 = 7;
FormulaParser.T__7 = 8;
FormulaParser.COMMENT = 9;
FormulaParser.LINE_COMMENT = 10;
FormulaParser.R__ = 11;
FormulaParser.R_ = 12;
FormulaParser.NEWLINES = 13;
FormulaParser.WHILESTATEMENT = 14;
FormulaParser.FORSTATEMENT = 15;
FormulaParser.FROMSTATEMENT = 16;
FormulaParser.INSTATEMENT = 17;
FormulaParser.TOSTATEMENT = 18;
FormulaParser.BYSTATEMENT = 19;
FormulaParser.LOOPSTATEMENT = 20;
FormulaParser.IFSTATEMENT = 21;
FormulaParser.THENSTATEMENT = 22;
FormulaParser.ELSESTATEMENT = 23;
FormulaParser.FUNCTIONSTATEMENT = 24;
FormulaParser.ENDBLOCK = 25;
FormulaParser.RETURNSTATEMENT = 26;
FormulaParser.NEWSTATEMENT = 27;
FormulaParser.TRYSTATEMENT = 28;
FormulaParser.CATCHSTATEMENT = 29;
FormulaParser.THROWSTATEMENT = 30;
FormulaParser.OR = 31;
FormulaParser.XOR = 32;
FormulaParser.AND = 33;
FormulaParser.EQUALS = 34;
FormulaParser.NOTEQUALS = 35;
FormulaParser.LT = 36;
FormulaParser.LTEQ = 37;
FormulaParser.GT = 38;
FormulaParser.GTEQ = 39;
FormulaParser.PLUS = 40;
FormulaParser.MINUS = 41;
FormulaParser.MULT = 42;
FormulaParser.DIV = 43;
FormulaParser.MOD = 44;
FormulaParser.POW = 45;
FormulaParser.LARR = 46;
FormulaParser.RARR = 47;
FormulaParser.LCURL = 48;
FormulaParser.RCURL = 49;
FormulaParser.INTEGER = 50;
FormulaParser.FLOAT = 51;
FormulaParser.BOOL = 52;
FormulaParser.PER = 53;
FormulaParser.SQUARED = 54;
FormulaParser.CUBED = 55;
FormulaParser.IDENT = 56;
FormulaParser.PRIMITIVE = 57;
FormulaParser.LBRACKET = 58;
FormulaParser.RBRACKET = 59;
FormulaParser.SPACE = 60;
FormulaParser.STRING = 61;

FormulaParser.RULE_lines = 0;
FormulaParser.RULE_expression = 1;
FormulaParser.RULE_returnExp = 2;
FormulaParser.RULE_innerBlock = 3;
FormulaParser.RULE_whileLoop = 4;
FormulaParser.RULE_forLoop = 5;
FormulaParser.RULE_forInLoop = 6;
FormulaParser.RULE_ifThenElse = 7;
FormulaParser.RULE_functionDef = 8;
FormulaParser.RULE_tryCatch = 9;
FormulaParser.RULE_throwExp = 10;
FormulaParser.RULE_anonFunctionDef = 11;
FormulaParser.RULE_assignment = 12;
FormulaParser.RULE_assigned = 13;
FormulaParser.RULE_logicalExpression = 14;
FormulaParser.RULE_booleanXORExpression = 15;
FormulaParser.RULE_booleanAndExpression = 16;
FormulaParser.RULE_equalityExpression = 17;
FormulaParser.RULE_relationalExpression = 18;
FormulaParser.RULE_additiveExpression = 19;
FormulaParser.RULE_multiplicativeExpression = 20;
FormulaParser.RULE_arrayExpression = 21;
FormulaParser.RULE_negationExpression = 22;
FormulaParser.RULE_powerExpression = 23;
FormulaParser.RULE_unaryOrNegate = 24;
FormulaParser.RULE_unaryExpression = 25;
FormulaParser.RULE_innerPrimaryExpression = 26;
FormulaParser.RULE_selectionExpression = 27;
FormulaParser.RULE_funCall = 28;
FormulaParser.RULE_primaryExpression = 29;
FormulaParser.RULE_value = 30;
FormulaParser.RULE_material = 31;
FormulaParser.RULE_array = 32;
FormulaParser.RULE_newObject = 33;
FormulaParser.RULE_defaultValue = 34;
FormulaParser.RULE_selector = 35;
FormulaParser.RULE_minarray = 36;
FormulaParser.RULE_dotselector = 37;
FormulaParser.RULE_arrayName = 38;
FormulaParser.RULE_label = 39;
FormulaParser.RULE_number = 40;
FormulaParser.RULE_negnumber = 41;
FormulaParser.RULE_unitMultiplicativeExpression = 42;
FormulaParser.RULE_unitInnerMultiplicativeExpression = 43;
FormulaParser.RULE_unitClump = 44;
FormulaParser.RULE_unitPowerExpression = 45;
FormulaParser.RULE_unit = 46;
FormulaParser.RULE_string = 47;

class LinesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_lines;
    }

	EOF() {
	    return this.getToken(FormulaParser.EOF, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_expression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	whileLoop() {
	    return this.getTypedRuleContext(WhileLoopContext,0);
	};

	forLoop() {
	    return this.getTypedRuleContext(ForLoopContext,0);
	};

	forInLoop() {
	    return this.getTypedRuleContext(ForInLoopContext,0);
	};

	ifThenElse() {
	    return this.getTypedRuleContext(IfThenElseContext,0);
	};

	functionDef() {
	    return this.getTypedRuleContext(FunctionDefContext,0);
	};

	returnExp() {
	    return this.getTypedRuleContext(ReturnExpContext,0);
	};

	tryCatch() {
	    return this.getTypedRuleContext(TryCatchContext,0);
	};

	throwExp() {
	    return this.getTypedRuleContext(ThrowExpContext,0);
	};


}



class ReturnExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_returnExp;
    }

	RETURNSTATEMENT() {
	    return this.getToken(FormulaParser.RETURNSTATEMENT, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class InnerBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_innerBlock;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class WhileLoopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_whileLoop;
    }

	WHILESTATEMENT() {
	    return this.getToken(FormulaParser.WHILESTATEMENT, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	LOOPSTATEMENT() {
	    return this.getToken(FormulaParser.LOOPSTATEMENT, 0);
	};

	innerBlock() {
	    return this.getTypedRuleContext(InnerBlockContext,0);
	};


}



class ForLoopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_forLoop;
    }

	FORSTATEMENT() {
	    return this.getToken(FormulaParser.FORSTATEMENT, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	FROMSTATEMENT() {
	    return this.getToken(FormulaParser.FROMSTATEMENT, 0);
	};

	logicalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalExpressionContext,i);
	    }
	};

	TOSTATEMENT() {
	    return this.getToken(FormulaParser.TOSTATEMENT, 0);
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	LOOPSTATEMENT() {
	    return this.getToken(FormulaParser.LOOPSTATEMENT, 0);
	};

	BYSTATEMENT() {
	    return this.getToken(FormulaParser.BYSTATEMENT, 0);
	};

	innerBlock() {
	    return this.getTypedRuleContext(InnerBlockContext,0);
	};


}



class ForInLoopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_forInLoop;
    }

	FORSTATEMENT() {
	    return this.getToken(FormulaParser.FORSTATEMENT, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	INSTATEMENT() {
	    return this.getToken(FormulaParser.INSTATEMENT, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	LOOPSTATEMENT() {
	    return this.getToken(FormulaParser.LOOPSTATEMENT, 0);
	};

	innerBlock() {
	    return this.getTypedRuleContext(InnerBlockContext,0);
	};


}



class IfThenElseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_ifThenElse;
    }

	IFSTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.IFSTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.IFSTATEMENT, i);
	    }
	};


	logicalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalExpressionContext,i);
	    }
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	THENSTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.THENSTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.THENSTATEMENT, i);
	    }
	};


	innerBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerBlockContext);
	    } else {
	        return this.getTypedRuleContext(InnerBlockContext,i);
	    }
	};

	ELSESTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.ELSESTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.ELSESTATEMENT, i);
	    }
	};



}



class FunctionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_functionDef;
    }

	FUNCTIONSTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.FUNCTIONSTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.FUNCTIONSTATEMENT, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.IDENT);
	    } else {
	        return this.getToken(FormulaParser.IDENT, i);
	    }
	};


	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	innerBlock() {
	    return this.getTypedRuleContext(InnerBlockContext,0);
	};

	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.EQUALS);
	    } else {
	        return this.getToken(FormulaParser.EQUALS, i);
	    }
	};


	defaultValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultValueContext);
	    } else {
	        return this.getTypedRuleContext(DefaultValueContext,i);
	    }
	};


}



class TryCatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_tryCatch;
    }

	TRYSTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.TRYSTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.TRYSTATEMENT, i);
	    }
	};


	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	CATCHSTATEMENT() {
	    return this.getToken(FormulaParser.CATCHSTATEMENT, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	innerBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerBlockContext);
	    } else {
	        return this.getTypedRuleContext(InnerBlockContext,i);
	    }
	};


}



class ThrowExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_throwExp;
    }

	THROWSTATEMENT() {
	    return this.getToken(FormulaParser.THROWSTATEMENT, 0);
	};

	R_() {
	    return this.getToken(FormulaParser.R_, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};


}



class AnonFunctionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_anonFunctionDef;
    }

	FUNCTIONSTATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.FUNCTIONSTATEMENT);
	    } else {
	        return this.getToken(FormulaParser.FUNCTIONSTATEMENT, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.IDENT);
	    } else {
	        return this.getToken(FormulaParser.IDENT, i);
	    }
	};


	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	ENDBLOCK() {
	    return this.getToken(FormulaParser.ENDBLOCK, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.EQUALS);
	    } else {
	        return this.getToken(FormulaParser.EQUALS, i);
	    }
	};


	defaultValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultValueContext);
	    } else {
	        return this.getTypedRuleContext(DefaultValueContext,i);
	    }
	};

	innerBlock() {
	    return this.getTypedRuleContext(InnerBlockContext,0);
	};


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_assignment;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.IDENT);
	    } else {
	        return this.getToken(FormulaParser.IDENT, i);
	    }
	};


	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.EQUALS);
	    } else {
	        return this.getToken(FormulaParser.EQUALS, i);
	    }
	};


	defaultValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultValueContext);
	    } else {
	        return this.getTypedRuleContext(DefaultValueContext,i);
	    }
	};

	PRIMITIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.PRIMITIVE);
	    } else {
	        return this.getToken(FormulaParser.PRIMITIVE, i);
	    }
	};


	assigned = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignedContext);
	    } else {
	        return this.getTypedRuleContext(AssignedContext,i);
	    }
	};


}



class AssignedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_assigned;
    }

	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	selector() {
	    return this.getTypedRuleContext(SelectorContext,0);
	};


}



class LogicalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_logicalExpression;
    }

	booleanXORExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanXORExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanXORExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.OR);
	    } else {
	        return this.getToken(FormulaParser.OR, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class BooleanXORExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_booleanXORExpression;
    }

	booleanAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanAndExpressionContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.XOR);
	    } else {
	        return this.getToken(FormulaParser.XOR, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class BooleanAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_booleanAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.AND);
	    } else {
	        return this.getToken(FormulaParser.AND, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.EQUALS);
	    } else {
	        return this.getToken(FormulaParser.EQUALS, i);
	    }
	};


	NOTEQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.NOTEQUALS);
	    } else {
	        return this.getToken(FormulaParser.NOTEQUALS, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_relationalExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.LT);
	    } else {
	        return this.getToken(FormulaParser.LT, i);
	    }
	};


	LTEQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.LTEQ);
	    } else {
	        return this.getToken(FormulaParser.LTEQ, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.GT);
	    } else {
	        return this.getToken(FormulaParser.GT, i);
	    }
	};


	GTEQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.GTEQ);
	    } else {
	        return this.getToken(FormulaParser.GTEQ, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.PLUS);
	    } else {
	        return this.getToken(FormulaParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MINUS);
	    } else {
	        return this.getToken(FormulaParser.MINUS, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_multiplicativeExpression;
    }

	arrayExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ArrayExpressionContext,i);
	    }
	};

	MULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MULT);
	    } else {
	        return this.getToken(FormulaParser.MULT, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.DIV);
	    } else {
	        return this.getToken(FormulaParser.DIV, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MOD);
	    } else {
	        return this.getToken(FormulaParser.MOD, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class ArrayExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_arrayExpression;
    }

	negationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NegationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NegationExpressionContext,i);
	    }
	};


}



class NegationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_negationExpression;
    }

	MINUS() {
	    return this.getToken(FormulaParser.MINUS, 0);
	};

	powerExpression() {
	    return this.getTypedRuleContext(PowerExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class PowerExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_powerExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	POW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.POW);
	    } else {
	        return this.getToken(FormulaParser.POW, i);
	    }
	};


	unaryOrNegate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryOrNegateContext);
	    } else {
	        return this.getTypedRuleContext(UnaryOrNegateContext,i);
	    }
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class UnaryOrNegateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unaryOrNegate;
    }

	MINUS() {
	    return this.getToken(FormulaParser.MINUS, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unaryExpression;
    }

	innerPrimaryExpression() {
	    return this.getTypedRuleContext(InnerPrimaryExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class InnerPrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_innerPrimaryExpression;
    }

	selectionExpression() {
	    return this.getTypedRuleContext(SelectionExpressionContext,0);
	};


}



class SelectionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_selectionExpression;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	funCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunCallContext);
	    } else {
	        return this.getTypedRuleContext(FunCallContext,i);
	    }
	};


}



class FunCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_funCall;
    }

	logicalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalExpressionContext,i);
	    }
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_primaryExpression;
    }

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_value;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	BOOL() {
	    return this.getToken(FormulaParser.BOOL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	material() {
	    return this.getTypedRuleContext(MaterialContext,0);
	};

	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	PRIMITIVE() {
	    return this.getToken(FormulaParser.PRIMITIVE, 0);
	};

	array() {
	    return this.getTypedRuleContext(ArrayContext,0);
	};

	anonFunctionDef() {
	    return this.getTypedRuleContext(AnonFunctionDefContext,0);
	};

	newObject() {
	    return this.getTypedRuleContext(NewObjectContext,0);
	};


}



class MaterialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_material;
    }

	LCURL() {
	    return this.getToken(FormulaParser.LCURL, 0);
	};

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	unitMultiplicativeExpression() {
	    return this.getTypedRuleContext(UnitMultiplicativeExpressionContext,0);
	};

	RCURL() {
	    return this.getToken(FormulaParser.RCURL, 0);
	};


}



class ArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_array;
    }

	LARR() {
	    return this.getToken(FormulaParser.LARR, 0);
	};

	RARR() {
	    return this.getToken(FormulaParser.RARR, 0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	LCURL() {
	    return this.getToken(FormulaParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(FormulaParser.RCURL, 0);
	};

	logicalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalExpressionContext,i);
	    }
	};


}



class NewObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_newObject;
    }

	NEWSTATEMENT() {
	    return this.getToken(FormulaParser.NEWSTATEMENT, 0);
	};

	R_() {
	    return this.getToken(FormulaParser.R_, 0);
	};

	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	funCall() {
	    return this.getTypedRuleContext(FunCallContext,0);
	};


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_defaultValue;
    }

	negnumber() {
	    return this.getTypedRuleContext(NegnumberContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	BOOL() {
	    return this.getToken(FormulaParser.BOOL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	array() {
	    return this.getTypedRuleContext(ArrayContext,0);
	};


}



class SelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_selector;
    }

	minarray() {
	    return this.getTypedRuleContext(MinarrayContext,0);
	};

	dotselector() {
	    return this.getTypedRuleContext(DotselectorContext,0);
	};


}



class MinarrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_minarray;
    }

	LARR() {
	    return this.getToken(FormulaParser.LARR, 0);
	};

	RARR() {
	    return this.getToken(FormulaParser.RARR, 0);
	};

	logicalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalExpressionContext,i);
	    }
	};

	MULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MULT);
	    } else {
	        return this.getToken(FormulaParser.MULT, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	LCURL() {
	    return this.getToken(FormulaParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(FormulaParser.RCURL, 0);
	};


}



class DotselectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_dotselector;
    }

	arrayName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayNameContext);
	    } else {
	        return this.getTypedRuleContext(ArrayNameContext,i);
	    }
	};


}



class ArrayNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_arrayName;
    }

	IDENT() {
	    return this.getToken(FormulaParser.IDENT, 0);
	};

	STRING() {
	    return this.getToken(FormulaParser.STRING, 0);
	};

	MULT() {
	    return this.getToken(FormulaParser.MULT, 0);
	};


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_label;
    }

	arrayName() {
	    return this.getTypedRuleContext(ArrayNameContext,0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	R__ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R__);
	    } else {
	        return this.getToken(FormulaParser.R__, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_number;
    }

	INTEGER() {
	    return this.getToken(FormulaParser.INTEGER, 0);
	};

	FLOAT() {
	    return this.getToken(FormulaParser.FLOAT, 0);
	};


}



class NegnumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_negnumber;
    }

	MINUS() {
	    return this.getToken(FormulaParser.MINUS, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};


}



class UnitMultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unitMultiplicativeExpression;
    }

	unitInnerMultiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnitInnerMultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnitInnerMultiplicativeExpressionContext,i);
	    }
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	PER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.PER);
	    } else {
	        return this.getToken(FormulaParser.PER, i);
	    }
	};



}



class UnitInnerMultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unitInnerMultiplicativeExpression;
    }

	unitClump = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnitClumpContext);
	    } else {
	        return this.getTypedRuleContext(UnitClumpContext,i);
	    }
	};

	MULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MULT);
	    } else {
	        return this.getToken(FormulaParser.MULT, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.DIV);
	    } else {
	        return this.getToken(FormulaParser.DIV, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class UnitClumpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unitClump;
    }

	unitPowerExpression() {
	    return this.getTypedRuleContext(UnitPowerExpressionContext,0);
	};

	INTEGER() {
	    return this.getToken(FormulaParser.INTEGER, 0);
	};

	DIV() {
	    return this.getToken(FormulaParser.DIV, 0);
	};

	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	CUBED() {
	    return this.getToken(FormulaParser.CUBED, 0);
	};

	SQUARED() {
	    return this.getToken(FormulaParser.SQUARED, 0);
	};


}



class UnitPowerExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unitPowerExpression;
    }

	unit() {
	    return this.getTypedRuleContext(UnitContext,0);
	};

	POW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.POW);
	    } else {
	        return this.getToken(FormulaParser.POW, i);
	    }
	};


	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.INTEGER);
	    } else {
	        return this.getToken(FormulaParser.INTEGER, i);
	    }
	};


	FLOAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.FLOAT);
	    } else {
	        return this.getToken(FormulaParser.FLOAT, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.MINUS);
	    } else {
	        return this.getToken(FormulaParser.MINUS, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};



}



class UnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_unit;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.IDENT);
	    } else {
	        return this.getToken(FormulaParser.IDENT, i);
	    }
	};


	R_ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FormulaParser.R_);
	    } else {
	        return this.getToken(FormulaParser.R_, i);
	    }
	};


	unitMultiplicativeExpression() {
	    return this.getTypedRuleContext(UnitMultiplicativeExpressionContext,0);
	};


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FormulaParser.RULE_string;
    }

	STRING() {
	    return this.getToken(FormulaParser.STRING, 0);
	};


}




FormulaParser.LinesContext = LinesContext; 
FormulaParser.ExpressionContext = ExpressionContext; 
FormulaParser.ReturnExpContext = ReturnExpContext; 
FormulaParser.InnerBlockContext = InnerBlockContext; 
FormulaParser.WhileLoopContext = WhileLoopContext; 
FormulaParser.ForLoopContext = ForLoopContext; 
FormulaParser.ForInLoopContext = ForInLoopContext; 
FormulaParser.IfThenElseContext = IfThenElseContext; 
FormulaParser.FunctionDefContext = FunctionDefContext; 
FormulaParser.TryCatchContext = TryCatchContext; 
FormulaParser.ThrowExpContext = ThrowExpContext; 
FormulaParser.AnonFunctionDefContext = AnonFunctionDefContext; 
FormulaParser.AssignmentContext = AssignmentContext; 
FormulaParser.AssignedContext = AssignedContext; 
FormulaParser.LogicalExpressionContext = LogicalExpressionContext; 
FormulaParser.BooleanXORExpressionContext = BooleanXORExpressionContext; 
FormulaParser.BooleanAndExpressionContext = BooleanAndExpressionContext; 
FormulaParser.EqualityExpressionContext = EqualityExpressionContext; 
FormulaParser.RelationalExpressionContext = RelationalExpressionContext; 
FormulaParser.AdditiveExpressionContext = AdditiveExpressionContext; 
FormulaParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
FormulaParser.ArrayExpressionContext = ArrayExpressionContext; 
FormulaParser.NegationExpressionContext = NegationExpressionContext; 
FormulaParser.PowerExpressionContext = PowerExpressionContext; 
FormulaParser.UnaryOrNegateContext = UnaryOrNegateContext; 
FormulaParser.UnaryExpressionContext = UnaryExpressionContext; 
FormulaParser.InnerPrimaryExpressionContext = InnerPrimaryExpressionContext; 
FormulaParser.SelectionExpressionContext = SelectionExpressionContext; 
FormulaParser.FunCallContext = FunCallContext; 
FormulaParser.PrimaryExpressionContext = PrimaryExpressionContext; 
FormulaParser.ValueContext = ValueContext; 
FormulaParser.MaterialContext = MaterialContext; 
FormulaParser.ArrayContext = ArrayContext; 
FormulaParser.NewObjectContext = NewObjectContext; 
FormulaParser.DefaultValueContext = DefaultValueContext; 
FormulaParser.SelectorContext = SelectorContext; 
FormulaParser.MinarrayContext = MinarrayContext; 
FormulaParser.DotselectorContext = DotselectorContext; 
FormulaParser.ArrayNameContext = ArrayNameContext; 
FormulaParser.LabelContext = LabelContext; 
FormulaParser.NumberContext = NumberContext; 
FormulaParser.NegnumberContext = NegnumberContext; 
FormulaParser.UnitMultiplicativeExpressionContext = UnitMultiplicativeExpressionContext; 
FormulaParser.UnitInnerMultiplicativeExpressionContext = UnitInnerMultiplicativeExpressionContext; 
FormulaParser.UnitClumpContext = UnitClumpContext; 
FormulaParser.UnitPowerExpressionContext = UnitPowerExpressionContext; 
FormulaParser.UnitContext = UnitContext; 
FormulaParser.StringContext = StringContext; 
